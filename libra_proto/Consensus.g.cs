// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: consensus.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Network {

  /// <summary>Holder for reflection information generated from consensus.proto</summary>
  public static partial class ConsensusReflection {

    #region Descriptor
    /// <summary>File descriptor for consensus.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConsensusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9jb25zZW5zdXMucHJvdG8SB25ldHdvcmsaEWxlZGdlcl9pbmZvLnByb3Rv",
            "GhF0cmFuc2FjdGlvbi5wcm90byLHAgoMQ29uc2Vuc3VzTXNnEiUKCHByb3Bv",
            "c2FsGAEgASgLMhEubmV0d29yay5Qcm9wb3NhbEgAEh0KBHZvdGUYAiABKAsy",
            "DS5uZXR3b3JrLlZvdGVIABIuCg1yZXF1ZXN0X2Jsb2NrGAMgASgLMhUubmV0",
            "d29yay5SZXF1ZXN0QmxvY2tIABIuCg1yZXNwb25kX2Jsb2NrGAQgASgLMhUu",
            "bmV0d29yay5SZXNwb25kQmxvY2tIABImCgluZXdfcm91bmQYBSABKAsyES5u",
            "ZXR3b3JrLk5ld1JvdW5kSAASLgoNcmVxdWVzdF9jaHVuaxgGIAEoCzIVLm5l",
            "dHdvcmsuUmVxdWVzdENodW5rSAASLgoNcmVzcG9uZF9jaHVuaxgHIAEoCzIV",
            "Lm5ldHdvcmsuUmVzcG9uZENodW5rSABCCQoHbWVzc2FnZSK5AQoIUHJvcG9z",
            "YWwSJgoOcHJvcG9zZWRfYmxvY2sYASABKAsyDi5uZXR3b3JrLkJsb2NrEhAK",
            "CHByb3Bvc2VyGAIgASgMEkEKE3RpbWVvdXRfcXVvcnVtX2NlcnQYAyABKAsy",
            "JC5uZXR3b3JrLlBhY2VtYWtlclRpbWVvdXRDZXJ0aWZpY2F0ZRIwChNoaWdo",
            "ZXN0X2xlZGdlcl9pbmZvGAQgASgLMhMubmV0d29yay5RdW9ydW1DZXJ0IkQK",
            "EFBhY2VtYWtlclRpbWVvdXQSDQoFcm91bmQYASABKAQSDgoGYXV0aG9yGAIg",
            "ASgMEhEKCXNpZ25hdHVyZRgDIAEoDCLHAQoITmV3Um91bmQSMAoTaGlnaGVz",
            "dF9xdW9ydW1fY2VydBgBIAEoCzITLm5ldHdvcmsuUXVvcnVtQ2VydBI0ChFw",
            "YWNlbWFrZXJfdGltZW91dBgCIAEoCzIZLm5ldHdvcmsuUGFjZW1ha2VyVGlt",
            "ZW91dBIOCgZhdXRob3IYAyABKAwSEQoJc2lnbmF0dXJlGAQgASgMEjAKE2hp",
            "Z2hlc3RfbGVkZ2VyX2luZm8YBSABKAsyEy5uZXR3b3JrLlF1b3J1bUNlcnQi",
            "WQobUGFjZW1ha2VyVGltZW91dENlcnRpZmljYXRlEg0KBXJvdW5kGAEgASgE",
            "EisKCHRpbWVvdXRzGAIgAygLMhkubmV0d29yay5QYWNlbWFrZXJUaW1lb3V0",
            "IrwBCgVCbG9jaxIKCgJpZBgBIAEoDBIRCglwYXJlbnRfaWQYAiABKAwSDwoH",
            "cGF5bG9hZBgDIAEoDBINCgVyb3VuZBgEIAEoBBIOCgZoZWlnaHQYBSABKAQS",
            "FwoPdGltZXN0YW1wX3VzZWNzGAYgASgEEigKC3F1b3J1bV9jZXJ0GAcgASgL",
            "MhMubmV0d29yay5RdW9ydW1DZXJ0Eg4KBmF1dGhvchgIIAEoDBIRCglzaWdu",
            "YXR1cmUYCSABKAwijQEKClF1b3J1bUNlcnQSEAoIYmxvY2tfaWQYASABKAwS",
            "EAoIc3RhdGVfaWQYAiABKAwSDwoHdmVyc2lvbhgDIAEoBBINCgVyb3VuZBgE",
            "IAEoBBI7ChJzaWduZWRfbGVkZ2VyX2luZm8YBSABKAsyHy50eXBlcy5MZWRn",
            "ZXJJbmZvV2l0aFNpZ25hdHVyZXMipwEKBFZvdGUSGQoRcHJvcG9zZWRfYmxv",
            "Y2tfaWQYASABKAwSGQoRZXhlY3V0ZWRfc3RhdGVfaWQYAiABKAwSDwoHdmVy",
            "c2lvbhgDIAEoBBINCgVyb3VuZBgEIAEoBBIOCgZhdXRob3IYBSABKAwSJgoL",
            "bGVkZ2VyX2luZm8YBiABKAsyES50eXBlcy5MZWRnZXJJbmZvEhEKCXNpZ25h",
            "dHVyZRgHIAEoDCI0CgxSZXF1ZXN0QmxvY2sSEAoIYmxvY2tfaWQYASABKAwS",
            "EgoKbnVtX2Jsb2NrcxgCIAEoBCJdCgxSZXNwb25kQmxvY2sSLQoGc3RhdHVz",
            "GAEgASgOMh0ubmV0d29yay5CbG9ja1JldHJpZXZhbFN0YXR1cxIeCgZibG9j",
            "a3MYAiADKAsyDi5uZXR3b3JrLkJsb2NrIl4KDFJlcXVlc3RDaHVuaxIVCg1z",
            "dGFydF92ZXJzaW9uGAEgASgEEiMKBnRhcmdldBgCIAEoCzITLm5ldHdvcmsu",
            "UXVvcnVtQ2VydBISCgpiYXRjaF9zaXplGAMgASgEIkwKDFJlc3BvbmRDaHVu",
            "axI8ChN0eG5fbGlzdF93aXRoX3Byb29mGAEgASgLMh8udHlwZXMuVHJhbnNh",
            "Y3Rpb25MaXN0V2l0aFByb29mKk4KFEJsb2NrUmV0cmlldmFsU3RhdHVzEg0K",
            "CVNVQ0NFRURFRBAAEhAKDElEX05PVF9GT1VORBABEhUKEU5PVF9FTk9VR0hf",
            "QkxPQ0tTEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Types.LedgerInfoReflection.Descriptor, global::Types.TransactionReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Network.BlockRetrievalStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.ConsensusMsg), global::Network.ConsensusMsg.Parser, new[]{ "Proposal", "Vote", "RequestBlock", "RespondBlock", "NewRound", "RequestChunk", "RespondChunk" }, new[]{ "Message" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Proposal), global::Network.Proposal.Parser, new[]{ "ProposedBlock", "Proposer", "TimeoutQuorumCert", "HighestLedgerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.PacemakerTimeout), global::Network.PacemakerTimeout.Parser, new[]{ "Round", "Author", "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.NewRound), global::Network.NewRound.Parser, new[]{ "HighestQuorumCert", "PacemakerTimeout", "Author", "Signature", "HighestLedgerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.PacemakerTimeoutCertificate), global::Network.PacemakerTimeoutCertificate.Parser, new[]{ "Round", "Timeouts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Block), global::Network.Block.Parser, new[]{ "Id", "ParentId", "Payload", "Round", "Height", "TimestampUsecs", "QuorumCert", "Author", "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.QuorumCert), global::Network.QuorumCert.Parser, new[]{ "BlockId", "StateId", "Version", "Round", "SignedLedgerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Vote), global::Network.Vote.Parser, new[]{ "ProposedBlockId", "ExecutedStateId", "Version", "Round", "Author", "LedgerInfo", "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.RequestBlock), global::Network.RequestBlock.Parser, new[]{ "BlockId", "NumBlocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.RespondBlock), global::Network.RespondBlock.Parser, new[]{ "Status", "Blocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.RequestChunk), global::Network.RequestChunk.Parser, new[]{ "StartVersion", "Target", "BatchSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.RespondChunk), global::Network.RespondChunk.Parser, new[]{ "TxnListWithProof" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BlockRetrievalStatus {
    /// <summary>
    /// Successfully fill in the request.
    /// </summary>
    [pbr::OriginalName("SUCCEEDED")] Succeeded = 0,
    /// <summary>
    /// Can not find the block corresponding to block_id.
    /// </summary>
    [pbr::OriginalName("ID_NOT_FOUND")] IdNotFound = 1,
    /// <summary>
    /// Can not find enough blocks but find some.
    /// </summary>
    [pbr::OriginalName("NOT_ENOUGH_BLOCKS")] NotEnoughBlocks = 2,
  }

  #endregion

  #region Messages
  public sealed partial class ConsensusMsg : pb::IMessage<ConsensusMsg> {
    private static readonly pb::MessageParser<ConsensusMsg> _parser = new pb::MessageParser<ConsensusMsg>(() => new ConsensusMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsensusMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusMsg(ConsensusMsg other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.Proposal:
          Proposal = other.Proposal.Clone();
          break;
        case MessageOneofCase.Vote:
          Vote = other.Vote.Clone();
          break;
        case MessageOneofCase.RequestBlock:
          RequestBlock = other.RequestBlock.Clone();
          break;
        case MessageOneofCase.RespondBlock:
          RespondBlock = other.RespondBlock.Clone();
          break;
        case MessageOneofCase.NewRound:
          NewRound = other.NewRound.Clone();
          break;
        case MessageOneofCase.RequestChunk:
          RequestChunk = other.RequestChunk.Clone();
          break;
        case MessageOneofCase.RespondChunk:
          RespondChunk = other.RespondChunk.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusMsg Clone() {
      return new ConsensusMsg(this);
    }

    /// <summary>Field number for the "proposal" field.</summary>
    public const int ProposalFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.Proposal Proposal {
      get { return messageCase_ == MessageOneofCase.Proposal ? (global::Network.Proposal) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Proposal;
      }
    }

    /// <summary>Field number for the "vote" field.</summary>
    public const int VoteFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.Vote Vote {
      get { return messageCase_ == MessageOneofCase.Vote ? (global::Network.Vote) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Vote;
      }
    }

    /// <summary>Field number for the "request_block" field.</summary>
    public const int RequestBlockFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.RequestBlock RequestBlock {
      get { return messageCase_ == MessageOneofCase.RequestBlock ? (global::Network.RequestBlock) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.RequestBlock;
      }
    }

    /// <summary>Field number for the "respond_block" field.</summary>
    public const int RespondBlockFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.RespondBlock RespondBlock {
      get { return messageCase_ == MessageOneofCase.RespondBlock ? (global::Network.RespondBlock) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.RespondBlock;
      }
    }

    /// <summary>Field number for the "new_round" field.</summary>
    public const int NewRoundFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.NewRound NewRound {
      get { return messageCase_ == MessageOneofCase.NewRound ? (global::Network.NewRound) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.NewRound;
      }
    }

    /// <summary>Field number for the "request_chunk" field.</summary>
    public const int RequestChunkFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.RequestChunk RequestChunk {
      get { return messageCase_ == MessageOneofCase.RequestChunk ? (global::Network.RequestChunk) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.RequestChunk;
      }
    }

    /// <summary>Field number for the "respond_chunk" field.</summary>
    public const int RespondChunkFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.RespondChunk RespondChunk {
      get { return messageCase_ == MessageOneofCase.RespondChunk ? (global::Network.RespondChunk) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.RespondChunk;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Proposal = 1,
      Vote = 2,
      RequestBlock = 3,
      RespondBlock = 4,
      NewRound = 5,
      RequestChunk = 6,
      RespondChunk = 7,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsensusMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsensusMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Proposal, other.Proposal)) return false;
      if (!object.Equals(Vote, other.Vote)) return false;
      if (!object.Equals(RequestBlock, other.RequestBlock)) return false;
      if (!object.Equals(RespondBlock, other.RespondBlock)) return false;
      if (!object.Equals(NewRound, other.NewRound)) return false;
      if (!object.Equals(RequestChunk, other.RequestChunk)) return false;
      if (!object.Equals(RespondChunk, other.RespondChunk)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.Proposal) hash ^= Proposal.GetHashCode();
      if (messageCase_ == MessageOneofCase.Vote) hash ^= Vote.GetHashCode();
      if (messageCase_ == MessageOneofCase.RequestBlock) hash ^= RequestBlock.GetHashCode();
      if (messageCase_ == MessageOneofCase.RespondBlock) hash ^= RespondBlock.GetHashCode();
      if (messageCase_ == MessageOneofCase.NewRound) hash ^= NewRound.GetHashCode();
      if (messageCase_ == MessageOneofCase.RequestChunk) hash ^= RequestChunk.GetHashCode();
      if (messageCase_ == MessageOneofCase.RespondChunk) hash ^= RespondChunk.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Proposal) {
        output.WriteRawTag(10);
        output.WriteMessage(Proposal);
      }
      if (messageCase_ == MessageOneofCase.Vote) {
        output.WriteRawTag(18);
        output.WriteMessage(Vote);
      }
      if (messageCase_ == MessageOneofCase.RequestBlock) {
        output.WriteRawTag(26);
        output.WriteMessage(RequestBlock);
      }
      if (messageCase_ == MessageOneofCase.RespondBlock) {
        output.WriteRawTag(34);
        output.WriteMessage(RespondBlock);
      }
      if (messageCase_ == MessageOneofCase.NewRound) {
        output.WriteRawTag(42);
        output.WriteMessage(NewRound);
      }
      if (messageCase_ == MessageOneofCase.RequestChunk) {
        output.WriteRawTag(50);
        output.WriteMessage(RequestChunk);
      }
      if (messageCase_ == MessageOneofCase.RespondChunk) {
        output.WriteRawTag(58);
        output.WriteMessage(RespondChunk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.Proposal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Proposal);
      }
      if (messageCase_ == MessageOneofCase.Vote) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vote);
      }
      if (messageCase_ == MessageOneofCase.RequestBlock) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestBlock);
      }
      if (messageCase_ == MessageOneofCase.RespondBlock) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RespondBlock);
      }
      if (messageCase_ == MessageOneofCase.NewRound) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewRound);
      }
      if (messageCase_ == MessageOneofCase.RequestChunk) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestChunk);
      }
      if (messageCase_ == MessageOneofCase.RespondChunk) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RespondChunk);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsensusMsg other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Proposal:
          if (Proposal == null) {
            Proposal = new global::Network.Proposal();
          }
          Proposal.MergeFrom(other.Proposal);
          break;
        case MessageOneofCase.Vote:
          if (Vote == null) {
            Vote = new global::Network.Vote();
          }
          Vote.MergeFrom(other.Vote);
          break;
        case MessageOneofCase.RequestBlock:
          if (RequestBlock == null) {
            RequestBlock = new global::Network.RequestBlock();
          }
          RequestBlock.MergeFrom(other.RequestBlock);
          break;
        case MessageOneofCase.RespondBlock:
          if (RespondBlock == null) {
            RespondBlock = new global::Network.RespondBlock();
          }
          RespondBlock.MergeFrom(other.RespondBlock);
          break;
        case MessageOneofCase.NewRound:
          if (NewRound == null) {
            NewRound = new global::Network.NewRound();
          }
          NewRound.MergeFrom(other.NewRound);
          break;
        case MessageOneofCase.RequestChunk:
          if (RequestChunk == null) {
            RequestChunk = new global::Network.RequestChunk();
          }
          RequestChunk.MergeFrom(other.RequestChunk);
          break;
        case MessageOneofCase.RespondChunk:
          if (RespondChunk == null) {
            RespondChunk = new global::Network.RespondChunk();
          }
          RespondChunk.MergeFrom(other.RespondChunk);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Network.Proposal subBuilder = new global::Network.Proposal();
            if (messageCase_ == MessageOneofCase.Proposal) {
              subBuilder.MergeFrom(Proposal);
            }
            input.ReadMessage(subBuilder);
            Proposal = subBuilder;
            break;
          }
          case 18: {
            global::Network.Vote subBuilder = new global::Network.Vote();
            if (messageCase_ == MessageOneofCase.Vote) {
              subBuilder.MergeFrom(Vote);
            }
            input.ReadMessage(subBuilder);
            Vote = subBuilder;
            break;
          }
          case 26: {
            global::Network.RequestBlock subBuilder = new global::Network.RequestBlock();
            if (messageCase_ == MessageOneofCase.RequestBlock) {
              subBuilder.MergeFrom(RequestBlock);
            }
            input.ReadMessage(subBuilder);
            RequestBlock = subBuilder;
            break;
          }
          case 34: {
            global::Network.RespondBlock subBuilder = new global::Network.RespondBlock();
            if (messageCase_ == MessageOneofCase.RespondBlock) {
              subBuilder.MergeFrom(RespondBlock);
            }
            input.ReadMessage(subBuilder);
            RespondBlock = subBuilder;
            break;
          }
          case 42: {
            global::Network.NewRound subBuilder = new global::Network.NewRound();
            if (messageCase_ == MessageOneofCase.NewRound) {
              subBuilder.MergeFrom(NewRound);
            }
            input.ReadMessage(subBuilder);
            NewRound = subBuilder;
            break;
          }
          case 50: {
            global::Network.RequestChunk subBuilder = new global::Network.RequestChunk();
            if (messageCase_ == MessageOneofCase.RequestChunk) {
              subBuilder.MergeFrom(RequestChunk);
            }
            input.ReadMessage(subBuilder);
            RequestChunk = subBuilder;
            break;
          }
          case 58: {
            global::Network.RespondChunk subBuilder = new global::Network.RespondChunk();
            if (messageCase_ == MessageOneofCase.RespondChunk) {
              subBuilder.MergeFrom(RespondChunk);
            }
            input.ReadMessage(subBuilder);
            RespondChunk = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Proposal : pb::IMessage<Proposal> {
    private static readonly pb::MessageParser<Proposal> _parser = new pb::MessageParser<Proposal>(() => new Proposal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Proposal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proposal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proposal(Proposal other) : this() {
      proposedBlock_ = other.proposedBlock_ != null ? other.proposedBlock_.Clone() : null;
      proposer_ = other.proposer_;
      timeoutQuorumCert_ = other.timeoutQuorumCert_ != null ? other.timeoutQuorumCert_.Clone() : null;
      highestLedgerInfo_ = other.highestLedgerInfo_ != null ? other.highestLedgerInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proposal Clone() {
      return new Proposal(this);
    }

    /// <summary>Field number for the "proposed_block" field.</summary>
    public const int ProposedBlockFieldNumber = 1;
    private global::Network.Block proposedBlock_;
    /// <summary>
    /// The proposed block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.Block ProposedBlock {
      get { return proposedBlock_; }
      set {
        proposedBlock_ = value;
      }
    }

    /// <summary>Field number for the "proposer" field.</summary>
    public const int ProposerFieldNumber = 2;
    private pb::ByteString proposer_ = pb::ByteString.Empty;
    /// <summary>
    /// Author of the proposal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Proposer {
      get { return proposer_; }
      set {
        proposer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeout_quorum_cert" field.</summary>
    public const int TimeoutQuorumCertFieldNumber = 3;
    private global::Network.PacemakerTimeoutCertificate timeoutQuorumCert_;
    /// <summary>
    /// Optional timeout quorum certificate if this proposal is generated by
    /// timeout
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.PacemakerTimeoutCertificate TimeoutQuorumCert {
      get { return timeoutQuorumCert_; }
      set {
        timeoutQuorumCert_ = value;
      }
    }

    /// <summary>Field number for the "highest_ledger_info" field.</summary>
    public const int HighestLedgerInfoFieldNumber = 4;
    private global::Network.QuorumCert highestLedgerInfo_;
    /// <summary>
    /// The highest ledger info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.QuorumCert HighestLedgerInfo {
      get { return highestLedgerInfo_; }
      set {
        highestLedgerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Proposal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Proposal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProposedBlock, other.ProposedBlock)) return false;
      if (Proposer != other.Proposer) return false;
      if (!object.Equals(TimeoutQuorumCert, other.TimeoutQuorumCert)) return false;
      if (!object.Equals(HighestLedgerInfo, other.HighestLedgerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (proposedBlock_ != null) hash ^= ProposedBlock.GetHashCode();
      if (Proposer.Length != 0) hash ^= Proposer.GetHashCode();
      if (timeoutQuorumCert_ != null) hash ^= TimeoutQuorumCert.GetHashCode();
      if (highestLedgerInfo_ != null) hash ^= HighestLedgerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (proposedBlock_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProposedBlock);
      }
      if (Proposer.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Proposer);
      }
      if (timeoutQuorumCert_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TimeoutQuorumCert);
      }
      if (highestLedgerInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(HighestLedgerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (proposedBlock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProposedBlock);
      }
      if (Proposer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Proposer);
      }
      if (timeoutQuorumCert_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeoutQuorumCert);
      }
      if (highestLedgerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HighestLedgerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Proposal other) {
      if (other == null) {
        return;
      }
      if (other.proposedBlock_ != null) {
        if (proposedBlock_ == null) {
          ProposedBlock = new global::Network.Block();
        }
        ProposedBlock.MergeFrom(other.ProposedBlock);
      }
      if (other.Proposer.Length != 0) {
        Proposer = other.Proposer;
      }
      if (other.timeoutQuorumCert_ != null) {
        if (timeoutQuorumCert_ == null) {
          TimeoutQuorumCert = new global::Network.PacemakerTimeoutCertificate();
        }
        TimeoutQuorumCert.MergeFrom(other.TimeoutQuorumCert);
      }
      if (other.highestLedgerInfo_ != null) {
        if (highestLedgerInfo_ == null) {
          HighestLedgerInfo = new global::Network.QuorumCert();
        }
        HighestLedgerInfo.MergeFrom(other.HighestLedgerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (proposedBlock_ == null) {
              ProposedBlock = new global::Network.Block();
            }
            input.ReadMessage(ProposedBlock);
            break;
          }
          case 18: {
            Proposer = input.ReadBytes();
            break;
          }
          case 26: {
            if (timeoutQuorumCert_ == null) {
              TimeoutQuorumCert = new global::Network.PacemakerTimeoutCertificate();
            }
            input.ReadMessage(TimeoutQuorumCert);
            break;
          }
          case 34: {
            if (highestLedgerInfo_ == null) {
              HighestLedgerInfo = new global::Network.QuorumCert();
            }
            input.ReadMessage(HighestLedgerInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PacemakerTimeout : pb::IMessage<PacemakerTimeout> {
    private static readonly pb::MessageParser<PacemakerTimeout> _parser = new pb::MessageParser<PacemakerTimeout>(() => new PacemakerTimeout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PacemakerTimeout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacemakerTimeout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacemakerTimeout(PacemakerTimeout other) : this() {
      round_ = other.round_;
      author_ = other.author_;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacemakerTimeout Clone() {
      return new PacemakerTimeout(this);
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private ulong round_;
    /// <summary>
    /// Round that has timed out (e.g. we propose to switch to round + 1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 2;
    private pb::ByteString author_ = pb::ByteString.Empty;
    /// <summary>
    /// Author of timeout
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 3;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// Signature that this timeout was authored by owner
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PacemakerTimeout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PacemakerTimeout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Round != other.Round) return false;
      if (Author != other.Author) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Round != 0UL) hash ^= Round.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Round);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Author);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Round);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Author);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PacemakerTimeout other) {
      if (other == null) {
        return;
      }
      if (other.Round != 0UL) {
        Round = other.Round;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Round = input.ReadUInt64();
            break;
          }
          case 18: {
            Author = input.ReadBytes();
            break;
          }
          case 26: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewRound : pb::IMessage<NewRound> {
    private static readonly pb::MessageParser<NewRound> _parser = new pb::MessageParser<NewRound>(() => new NewRound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewRound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRound(NewRound other) : this() {
      highestQuorumCert_ = other.highestQuorumCert_ != null ? other.highestQuorumCert_.Clone() : null;
      pacemakerTimeout_ = other.pacemakerTimeout_ != null ? other.pacemakerTimeout_.Clone() : null;
      author_ = other.author_;
      signature_ = other.signature_;
      highestLedgerInfo_ = other.highestLedgerInfo_ != null ? other.highestLedgerInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRound Clone() {
      return new NewRound(this);
    }

    /// <summary>Field number for the "highest_quorum_cert" field.</summary>
    public const int HighestQuorumCertFieldNumber = 1;
    private global::Network.QuorumCert highestQuorumCert_;
    /// <summary>
    /// Highest quorum certificate known after a timeout ouf a round.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.QuorumCert HighestQuorumCert {
      get { return highestQuorumCert_; }
      set {
        highestQuorumCert_ = value;
      }
    }

    /// <summary>Field number for the "pacemaker_timeout" field.</summary>
    public const int PacemakerTimeoutFieldNumber = 2;
    private global::Network.PacemakerTimeout pacemakerTimeout_;
    /// <summary>
    /// Timeout
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.PacemakerTimeout PacemakerTimeout {
      get { return pacemakerTimeout_; }
      set {
        pacemakerTimeout_ = value;
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 3;
    private pb::ByteString author_ = pb::ByteString.Empty;
    /// <summary>
    /// Author of new round message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 4;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// Signature that this timeout was authored by owner
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "highest_ledger_info" field.</summary>
    public const int HighestLedgerInfoFieldNumber = 5;
    private global::Network.QuorumCert highestLedgerInfo_;
    /// <summary>
    /// The highest ledger info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.QuorumCert HighestLedgerInfo {
      get { return highestLedgerInfo_; }
      set {
        highestLedgerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewRound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewRound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HighestQuorumCert, other.HighestQuorumCert)) return false;
      if (!object.Equals(PacemakerTimeout, other.PacemakerTimeout)) return false;
      if (Author != other.Author) return false;
      if (Signature != other.Signature) return false;
      if (!object.Equals(HighestLedgerInfo, other.HighestLedgerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (highestQuorumCert_ != null) hash ^= HighestQuorumCert.GetHashCode();
      if (pacemakerTimeout_ != null) hash ^= PacemakerTimeout.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (highestLedgerInfo_ != null) hash ^= HighestLedgerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (highestQuorumCert_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HighestQuorumCert);
      }
      if (pacemakerTimeout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PacemakerTimeout);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Author);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Signature);
      }
      if (highestLedgerInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(HighestLedgerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (highestQuorumCert_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HighestQuorumCert);
      }
      if (pacemakerTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PacemakerTimeout);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Author);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (highestLedgerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HighestLedgerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewRound other) {
      if (other == null) {
        return;
      }
      if (other.highestQuorumCert_ != null) {
        if (highestQuorumCert_ == null) {
          HighestQuorumCert = new global::Network.QuorumCert();
        }
        HighestQuorumCert.MergeFrom(other.HighestQuorumCert);
      }
      if (other.pacemakerTimeout_ != null) {
        if (pacemakerTimeout_ == null) {
          PacemakerTimeout = new global::Network.PacemakerTimeout();
        }
        PacemakerTimeout.MergeFrom(other.PacemakerTimeout);
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.highestLedgerInfo_ != null) {
        if (highestLedgerInfo_ == null) {
          HighestLedgerInfo = new global::Network.QuorumCert();
        }
        HighestLedgerInfo.MergeFrom(other.HighestLedgerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (highestQuorumCert_ == null) {
              HighestQuorumCert = new global::Network.QuorumCert();
            }
            input.ReadMessage(HighestQuorumCert);
            break;
          }
          case 18: {
            if (pacemakerTimeout_ == null) {
              PacemakerTimeout = new global::Network.PacemakerTimeout();
            }
            input.ReadMessage(PacemakerTimeout);
            break;
          }
          case 26: {
            Author = input.ReadBytes();
            break;
          }
          case 34: {
            Signature = input.ReadBytes();
            break;
          }
          case 42: {
            if (highestLedgerInfo_ == null) {
              HighestLedgerInfo = new global::Network.QuorumCert();
            }
            input.ReadMessage(HighestLedgerInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PacemakerTimeoutCertificate : pb::IMessage<PacemakerTimeoutCertificate> {
    private static readonly pb::MessageParser<PacemakerTimeoutCertificate> _parser = new pb::MessageParser<PacemakerTimeoutCertificate>(() => new PacemakerTimeoutCertificate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PacemakerTimeoutCertificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacemakerTimeoutCertificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacemakerTimeoutCertificate(PacemakerTimeoutCertificate other) : this() {
      round_ = other.round_;
      timeouts_ = other.timeouts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacemakerTimeoutCertificate Clone() {
      return new PacemakerTimeoutCertificate(this);
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private ulong round_;
    /// <summary>
    /// Round for which this certificate was created
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "timeouts" field.</summary>
    public const int TimeoutsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Network.PacemakerTimeout> _repeated_timeouts_codec
        = pb::FieldCodec.ForMessage(18, global::Network.PacemakerTimeout.Parser);
    private readonly pbc::RepeatedField<global::Network.PacemakerTimeout> timeouts_ = new pbc::RepeatedField<global::Network.PacemakerTimeout>();
    /// <summary>
    /// List of certified timeouts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Network.PacemakerTimeout> Timeouts {
      get { return timeouts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PacemakerTimeoutCertificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PacemakerTimeoutCertificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Round != other.Round) return false;
      if(!timeouts_.Equals(other.timeouts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Round != 0UL) hash ^= Round.GetHashCode();
      hash ^= timeouts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Round);
      }
      timeouts_.WriteTo(output, _repeated_timeouts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Round);
      }
      size += timeouts_.CalculateSize(_repeated_timeouts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PacemakerTimeoutCertificate other) {
      if (other == null) {
        return;
      }
      if (other.Round != 0UL) {
        Round = other.Round;
      }
      timeouts_.Add(other.timeouts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Round = input.ReadUInt64();
            break;
          }
          case 18: {
            timeouts_.AddEntriesFrom(input, _repeated_timeouts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      id_ = other.id_;
      parentId_ = other.parentId_;
      payload_ = other.payload_;
      round_ = other.round_;
      height_ = other.height_;
      timestampUsecs_ = other.timestampUsecs_;
      quorumCert_ = other.quorumCert_ != null ? other.quorumCert_.Clone() : null;
      author_ = other.author_;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    /// <summary>
    /// This block's id as a hash value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_id" field.</summary>
    public const int ParentIdFieldNumber = 2;
    private pb::ByteString parentId_ = pb::ByteString.Empty;
    /// <summary>
    /// Parent block id of this block as a hash value (all zeros to indicate the
    /// genesis block)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ParentId {
      get { return parentId_; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    /// Payload of the block (e.g. one or more transaction(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 4;
    private ulong round_;
    /// <summary>
    /// The round of the block (internal monotonically increasing counter).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private ulong height_;
    /// <summary>
    /// The height of the block (position in the chain).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_usecs" field.</summary>
    public const int TimestampUsecsFieldNumber = 6;
    private ulong timestampUsecs_;
    /// <summary>
    /// The approximate physical microseconds since the epoch when the block was proposed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimestampUsecs {
      get { return timestampUsecs_; }
      set {
        timestampUsecs_ = value;
      }
    }

    /// <summary>Field number for the "quorum_cert" field.</summary>
    public const int QuorumCertFieldNumber = 7;
    private global::Network.QuorumCert quorumCert_;
    /// <summary>
    /// Contains the quorum certified ancestor and whether the quorum certified
    /// ancestor was voted on successfully
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.QuorumCert QuorumCert {
      get { return quorumCert_; }
      set {
        quorumCert_ = value;
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 8;
    private pb::ByteString author_ = pb::ByteString.Empty;
    /// <summary>
    /// Author of the block that can be validated by the author's public key and
    /// the signature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 9;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// Signature that the hash of this block has been authored by the owner of the
    /// private key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ParentId != other.ParentId) return false;
      if (Payload != other.Payload) return false;
      if (Round != other.Round) return false;
      if (Height != other.Height) return false;
      if (TimestampUsecs != other.TimestampUsecs) return false;
      if (!object.Equals(QuorumCert, other.QuorumCert)) return false;
      if (Author != other.Author) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ParentId.Length != 0) hash ^= ParentId.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (Round != 0UL) hash ^= Round.GetHashCode();
      if (Height != 0UL) hash ^= Height.GetHashCode();
      if (TimestampUsecs != 0UL) hash ^= TimestampUsecs.GetHashCode();
      if (quorumCert_ != null) hash ^= QuorumCert.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ParentId);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Payload);
      }
      if (Round != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Round);
      }
      if (Height != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Height);
      }
      if (TimestampUsecs != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TimestampUsecs);
      }
      if (quorumCert_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(QuorumCert);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Author);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (ParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ParentId);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (Round != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Round);
      }
      if (Height != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
      }
      if (TimestampUsecs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampUsecs);
      }
      if (quorumCert_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuorumCert);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Author);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ParentId.Length != 0) {
        ParentId = other.ParentId;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.Round != 0UL) {
        Round = other.Round;
      }
      if (other.Height != 0UL) {
        Height = other.Height;
      }
      if (other.TimestampUsecs != 0UL) {
        TimestampUsecs = other.TimestampUsecs;
      }
      if (other.quorumCert_ != null) {
        if (quorumCert_ == null) {
          QuorumCert = new global::Network.QuorumCert();
        }
        QuorumCert.MergeFrom(other.QuorumCert);
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 18: {
            ParentId = input.ReadBytes();
            break;
          }
          case 26: {
            Payload = input.ReadBytes();
            break;
          }
          case 32: {
            Round = input.ReadUInt64();
            break;
          }
          case 40: {
            Height = input.ReadUInt64();
            break;
          }
          case 48: {
            TimestampUsecs = input.ReadUInt64();
            break;
          }
          case 58: {
            if (quorumCert_ == null) {
              QuorumCert = new global::Network.QuorumCert();
            }
            input.ReadMessage(QuorumCert);
            break;
          }
          case 66: {
            Author = input.ReadBytes();
            break;
          }
          case 74: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuorumCert : pb::IMessage<QuorumCert> {
    private static readonly pb::MessageParser<QuorumCert> _parser = new pb::MessageParser<QuorumCert>(() => new QuorumCert());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuorumCert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuorumCert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuorumCert(QuorumCert other) : this() {
      blockId_ = other.blockId_;
      stateId_ = other.stateId_;
      version_ = other.version_;
      round_ = other.round_;
      signedLedgerInfo_ = other.signedLedgerInfo_ != null ? other.signedLedgerInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuorumCert Clone() {
      return new QuorumCert(this);
    }

    /// <summary>Field number for the "block_id" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private pb::ByteString blockId_ = pb::ByteString.Empty;
    /// <summary>
    /// Ancestor of this block (could be a parent)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockId {
      get { return blockId_; }
      set {
        blockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_id" field.</summary>
    public const int StateIdFieldNumber = 2;
    private pb::ByteString stateId_ = pb::ByteString.Empty;
    /// <summary>
    //// The execution state id of the corresponding block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StateId {
      get { return stateId_; }
      set {
        stateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private ulong version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 4;
    private ulong round_;
    /// <summary>
    //// The round of a certified block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "signed_ledger_info" field.</summary>
    public const int SignedLedgerInfoFieldNumber = 5;
    private global::Types.LedgerInfoWithSignatures signedLedgerInfo_;
    /// <summary>
    /// LedgerInfo with at least 2f+1 signatures. The LedgerInfo's consensus data
    /// hash is a digest that covers ancestor_id, state_id and round.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.LedgerInfoWithSignatures SignedLedgerInfo {
      get { return signedLedgerInfo_; }
      set {
        signedLedgerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuorumCert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuorumCert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockId != other.BlockId) return false;
      if (StateId != other.StateId) return false;
      if (Version != other.Version) return false;
      if (Round != other.Round) return false;
      if (!object.Equals(SignedLedgerInfo, other.SignedLedgerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockId.Length != 0) hash ^= BlockId.GetHashCode();
      if (StateId.Length != 0) hash ^= StateId.GetHashCode();
      if (Version != 0UL) hash ^= Version.GetHashCode();
      if (Round != 0UL) hash ^= Round.GetHashCode();
      if (signedLedgerInfo_ != null) hash ^= SignedLedgerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BlockId);
      }
      if (StateId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(StateId);
      }
      if (Version != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Version);
      }
      if (Round != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Round);
      }
      if (signedLedgerInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SignedLedgerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockId);
      }
      if (StateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StateId);
      }
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      if (Round != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Round);
      }
      if (signedLedgerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedLedgerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuorumCert other) {
      if (other == null) {
        return;
      }
      if (other.BlockId.Length != 0) {
        BlockId = other.BlockId;
      }
      if (other.StateId.Length != 0) {
        StateId = other.StateId;
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
      if (other.Round != 0UL) {
        Round = other.Round;
      }
      if (other.signedLedgerInfo_ != null) {
        if (signedLedgerInfo_ == null) {
          SignedLedgerInfo = new global::Types.LedgerInfoWithSignatures();
        }
        SignedLedgerInfo.MergeFrom(other.SignedLedgerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BlockId = input.ReadBytes();
            break;
          }
          case 18: {
            StateId = input.ReadBytes();
            break;
          }
          case 24: {
            Version = input.ReadUInt64();
            break;
          }
          case 32: {
            Round = input.ReadUInt64();
            break;
          }
          case 42: {
            if (signedLedgerInfo_ == null) {
              SignedLedgerInfo = new global::Types.LedgerInfoWithSignatures();
            }
            input.ReadMessage(SignedLedgerInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vote : pb::IMessage<Vote> {
    private static readonly pb::MessageParser<Vote> _parser = new pb::MessageParser<Vote>(() => new Vote());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote(Vote other) : this() {
      proposedBlockId_ = other.proposedBlockId_;
      executedStateId_ = other.executedStateId_;
      version_ = other.version_;
      round_ = other.round_;
      author_ = other.author_;
      ledgerInfo_ = other.ledgerInfo_ != null ? other.ledgerInfo_.Clone() : null;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote Clone() {
      return new Vote(this);
    }

    /// <summary>Field number for the "proposed_block_id" field.</summary>
    public const int ProposedBlockIdFieldNumber = 1;
    private pb::ByteString proposedBlockId_ = pb::ByteString.Empty;
    /// <summary>
    /// The id of the proposed block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProposedBlockId {
      get { return proposedBlockId_; }
      set {
        proposedBlockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "executed_state_id" field.</summary>
    public const int ExecutedStateIdFieldNumber = 2;
    private pb::ByteString executedStateId_ = pb::ByteString.Empty;
    /// <summary>
    /// The id of the state generated by the StateExecutor after executing the
    /// proposed block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExecutedStateId {
      get { return executedStateId_; }
      set {
        executedStateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private ulong version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 4;
    private ulong round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 5;
    private pb::ByteString author_ = pb::ByteString.Empty;
    /// <summary>
    /// Author of the vote.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ledger_info" field.</summary>
    public const int LedgerInfoFieldNumber = 6;
    private global::Types.LedgerInfo ledgerInfo_;
    /// <summary>
    /// The ledger info carried with the vote (corresponding to the block of a
    /// potentially committed txn).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.LedgerInfo LedgerInfo {
      get { return ledgerInfo_; }
      set {
        ledgerInfo_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 7;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// Signature of the ledger info.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProposedBlockId != other.ProposedBlockId) return false;
      if (ExecutedStateId != other.ExecutedStateId) return false;
      if (Version != other.Version) return false;
      if (Round != other.Round) return false;
      if (Author != other.Author) return false;
      if (!object.Equals(LedgerInfo, other.LedgerInfo)) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProposedBlockId.Length != 0) hash ^= ProposedBlockId.GetHashCode();
      if (ExecutedStateId.Length != 0) hash ^= ExecutedStateId.GetHashCode();
      if (Version != 0UL) hash ^= Version.GetHashCode();
      if (Round != 0UL) hash ^= Round.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (ledgerInfo_ != null) hash ^= LedgerInfo.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProposedBlockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ProposedBlockId);
      }
      if (ExecutedStateId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ExecutedStateId);
      }
      if (Version != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Version);
      }
      if (Round != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Round);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Author);
      }
      if (ledgerInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LedgerInfo);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProposedBlockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProposedBlockId);
      }
      if (ExecutedStateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExecutedStateId);
      }
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      if (Round != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Round);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Author);
      }
      if (ledgerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedgerInfo);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vote other) {
      if (other == null) {
        return;
      }
      if (other.ProposedBlockId.Length != 0) {
        ProposedBlockId = other.ProposedBlockId;
      }
      if (other.ExecutedStateId.Length != 0) {
        ExecutedStateId = other.ExecutedStateId;
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
      if (other.Round != 0UL) {
        Round = other.Round;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.ledgerInfo_ != null) {
        if (ledgerInfo_ == null) {
          LedgerInfo = new global::Types.LedgerInfo();
        }
        LedgerInfo.MergeFrom(other.LedgerInfo);
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProposedBlockId = input.ReadBytes();
            break;
          }
          case 18: {
            ExecutedStateId = input.ReadBytes();
            break;
          }
          case 24: {
            Version = input.ReadUInt64();
            break;
          }
          case 32: {
            Round = input.ReadUInt64();
            break;
          }
          case 42: {
            Author = input.ReadBytes();
            break;
          }
          case 50: {
            if (ledgerInfo_ == null) {
              LedgerInfo = new global::Types.LedgerInfo();
            }
            input.ReadMessage(LedgerInfo);
            break;
          }
          case 58: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestBlock : pb::IMessage<RequestBlock> {
    private static readonly pb::MessageParser<RequestBlock> _parser = new pb::MessageParser<RequestBlock>(() => new RequestBlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestBlock(RequestBlock other) : this() {
      blockId_ = other.blockId_;
      numBlocks_ = other.numBlocks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestBlock Clone() {
      return new RequestBlock(this);
    }

    /// <summary>Field number for the "block_id" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private pb::ByteString blockId_ = pb::ByteString.Empty;
    /// <summary>
    /// The id of the requested block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockId {
      get { return blockId_; }
      set {
        blockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_blocks" field.</summary>
    public const int NumBlocksFieldNumber = 2;
    private ulong numBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumBlocks {
      get { return numBlocks_; }
      set {
        numBlocks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockId != other.BlockId) return false;
      if (NumBlocks != other.NumBlocks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockId.Length != 0) hash ^= BlockId.GetHashCode();
      if (NumBlocks != 0UL) hash ^= NumBlocks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BlockId);
      }
      if (NumBlocks != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NumBlocks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockId);
      }
      if (NumBlocks != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumBlocks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestBlock other) {
      if (other == null) {
        return;
      }
      if (other.BlockId.Length != 0) {
        BlockId = other.BlockId;
      }
      if (other.NumBlocks != 0UL) {
        NumBlocks = other.NumBlocks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BlockId = input.ReadBytes();
            break;
          }
          case 16: {
            NumBlocks = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RespondBlock : pb::IMessage<RespondBlock> {
    private static readonly pb::MessageParser<RespondBlock> _parser = new pb::MessageParser<RespondBlock>(() => new RespondBlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RespondBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespondBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespondBlock(RespondBlock other) : this() {
      status_ = other.status_;
      blocks_ = other.blocks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespondBlock Clone() {
      return new RespondBlock(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Network.BlockRetrievalStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.BlockRetrievalStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Network.Block> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(18, global::Network.Block.Parser);
    private readonly pbc::RepeatedField<global::Network.Block> blocks_ = new pbc::RepeatedField<global::Network.Block>();
    /// <summary>
    /// The responded block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Network.Block> Blocks {
      get { return blocks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RespondBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RespondBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!blocks_.Equals(other.blocks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= blocks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      blocks_.WriteTo(output, _repeated_blocks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RespondBlock other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      blocks_.Add(other.blocks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Network.BlockRetrievalStatus) input.ReadEnum();
            break;
          }
          case 18: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestChunk : pb::IMessage<RequestChunk> {
    private static readonly pb::MessageParser<RequestChunk> _parser = new pb::MessageParser<RequestChunk>(() => new RequestChunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestChunk(RequestChunk other) : this() {
      startVersion_ = other.startVersion_;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      batchSize_ = other.batchSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestChunk Clone() {
      return new RequestChunk(this);
    }

    /// <summary>Field number for the "start_version" field.</summary>
    public const int StartVersionFieldNumber = 1;
    private ulong startVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartVersion {
      get { return startVersion_; }
      set {
        startVersion_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private global::Network.QuorumCert target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.QuorumCert Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 3;
    private ulong batchSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartVersion != other.StartVersion) return false;
      if (!object.Equals(Target, other.Target)) return false;
      if (BatchSize != other.BatchSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartVersion != 0UL) hash ^= StartVersion.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (BatchSize != 0UL) hash ^= BatchSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartVersion != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(StartVersion);
      }
      if (target_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
      if (BatchSize != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(BatchSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartVersion != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartVersion);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (BatchSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BatchSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestChunk other) {
      if (other == null) {
        return;
      }
      if (other.StartVersion != 0UL) {
        StartVersion = other.StartVersion;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::Network.QuorumCert();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.BatchSize != 0UL) {
        BatchSize = other.BatchSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartVersion = input.ReadUInt64();
            break;
          }
          case 18: {
            if (target_ == null) {
              Target = new global::Network.QuorumCert();
            }
            input.ReadMessage(Target);
            break;
          }
          case 24: {
            BatchSize = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RespondChunk : pb::IMessage<RespondChunk> {
    private static readonly pb::MessageParser<RespondChunk> _parser = new pb::MessageParser<RespondChunk>(() => new RespondChunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RespondChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ConsensusReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespondChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespondChunk(RespondChunk other) : this() {
      txnListWithProof_ = other.txnListWithProof_ != null ? other.txnListWithProof_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespondChunk Clone() {
      return new RespondChunk(this);
    }

    /// <summary>Field number for the "txn_list_with_proof" field.</summary>
    public const int TxnListWithProofFieldNumber = 1;
    private global::Types.TransactionListWithProof txnListWithProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.TransactionListWithProof TxnListWithProof {
      get { return txnListWithProof_; }
      set {
        txnListWithProof_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RespondChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RespondChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TxnListWithProof, other.TxnListWithProof)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (txnListWithProof_ != null) hash ^= TxnListWithProof.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (txnListWithProof_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TxnListWithProof);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (txnListWithProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TxnListWithProof);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RespondChunk other) {
      if (other == null) {
        return;
      }
      if (other.txnListWithProof_ != null) {
        if (txnListWithProof_ == null) {
          TxnListWithProof = new global::Types.TransactionListWithProof();
        }
        TxnListWithProof.MergeFrom(other.TxnListWithProof);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (txnListWithProof_ == null) {
              TxnListWithProof = new global::Types.TransactionListWithProof();
            }
            input.ReadMessage(TxnListWithProof);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
