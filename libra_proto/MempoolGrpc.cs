// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mempool.proto
// </auto-generated>
// Original file comments:
// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Mempool {
  /// <summary>
  /// -----------------------------------------------------------------------------
  /// ---------------- Mempool Service Definition
  /// -----------------------------------------------------------------------------
  /// </summary>
  public static partial class Mempool
  {
    static readonly string __ServiceName = "mempool.Mempool";

    static readonly grpc::Marshaller<global::Mempool.AddTransactionWithValidationRequest> __Marshaller_mempool_AddTransactionWithValidationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mempool.AddTransactionWithValidationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mempool.AddTransactionWithValidationResponse> __Marshaller_mempool_AddTransactionWithValidationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mempool.AddTransactionWithValidationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mempool.GetBlockRequest> __Marshaller_mempool_GetBlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mempool.GetBlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mempool.GetBlockResponse> __Marshaller_mempool_GetBlockResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mempool.GetBlockResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mempool.CommitTransactionsRequest> __Marshaller_mempool_CommitTransactionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mempool.CommitTransactionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mempool.CommitTransactionsResponse> __Marshaller_mempool_CommitTransactionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mempool.CommitTransactionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mempool.HealthCheckRequest> __Marshaller_mempool_HealthCheckRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mempool.HealthCheckRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Mempool.HealthCheckResponse> __Marshaller_mempool_HealthCheckResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mempool.HealthCheckResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Mempool.AddTransactionWithValidationRequest, global::Mempool.AddTransactionWithValidationResponse> __Method_AddTransactionWithValidation = new grpc::Method<global::Mempool.AddTransactionWithValidationRequest, global::Mempool.AddTransactionWithValidationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddTransactionWithValidation",
        __Marshaller_mempool_AddTransactionWithValidationRequest,
        __Marshaller_mempool_AddTransactionWithValidationResponse);

    static readonly grpc::Method<global::Mempool.GetBlockRequest, global::Mempool.GetBlockResponse> __Method_GetBlock = new grpc::Method<global::Mempool.GetBlockRequest, global::Mempool.GetBlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlock",
        __Marshaller_mempool_GetBlockRequest,
        __Marshaller_mempool_GetBlockResponse);

    static readonly grpc::Method<global::Mempool.CommitTransactionsRequest, global::Mempool.CommitTransactionsResponse> __Method_CommitTransactions = new grpc::Method<global::Mempool.CommitTransactionsRequest, global::Mempool.CommitTransactionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CommitTransactions",
        __Marshaller_mempool_CommitTransactionsRequest,
        __Marshaller_mempool_CommitTransactionsResponse);

    static readonly grpc::Method<global::Mempool.HealthCheckRequest, global::Mempool.HealthCheckResponse> __Method_HealthCheck = new grpc::Method<global::Mempool.HealthCheckRequest, global::Mempool.HealthCheckResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HealthCheck",
        __Marshaller_mempool_HealthCheckRequest,
        __Marshaller_mempool_HealthCheckResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mempool.MempoolReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Mempool</summary>
    [grpc::BindServiceMethod(typeof(Mempool), "BindService")]
    public abstract partial class MempoolBase
    {
      /// <summary>
      /// Adds a new transaction to the mempool with validation against existing
      /// transactions in the mempool.  Note that this function performs additional
      /// validation that AC is unable to perform. (because AC knows only about a
      /// single transaction, but mempool potentially knows about multiple pending
      /// transactions)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mempool.AddTransactionWithValidationResponse> AddTransactionWithValidation(global::Mempool.AddTransactionWithValidationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetch ordered block of transactions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mempool.GetBlockResponse> GetBlock(global::Mempool.GetBlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove committed transactions from Mempool
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mempool.CommitTransactionsResponse> CommitTransactions(global::Mempool.CommitTransactionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check the health of mempool
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Mempool.HealthCheckResponse> HealthCheck(global::Mempool.HealthCheckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Mempool</summary>
    public partial class MempoolClient : grpc::ClientBase<MempoolClient>
    {
      /// <summary>Creates a new client for Mempool</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MempoolClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Mempool that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MempoolClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MempoolClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MempoolClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Adds a new transaction to the mempool with validation against existing
      /// transactions in the mempool.  Note that this function performs additional
      /// validation that AC is unable to perform. (because AC knows only about a
      /// single transaction, but mempool potentially knows about multiple pending
      /// transactions)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mempool.AddTransactionWithValidationResponse AddTransactionWithValidation(global::Mempool.AddTransactionWithValidationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddTransactionWithValidation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a new transaction to the mempool with validation against existing
      /// transactions in the mempool.  Note that this function performs additional
      /// validation that AC is unable to perform. (because AC knows only about a
      /// single transaction, but mempool potentially knows about multiple pending
      /// transactions)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mempool.AddTransactionWithValidationResponse AddTransactionWithValidation(global::Mempool.AddTransactionWithValidationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddTransactionWithValidation, null, options, request);
      }
      /// <summary>
      /// Adds a new transaction to the mempool with validation against existing
      /// transactions in the mempool.  Note that this function performs additional
      /// validation that AC is unable to perform. (because AC knows only about a
      /// single transaction, but mempool potentially knows about multiple pending
      /// transactions)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mempool.AddTransactionWithValidationResponse> AddTransactionWithValidationAsync(global::Mempool.AddTransactionWithValidationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddTransactionWithValidationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a new transaction to the mempool with validation against existing
      /// transactions in the mempool.  Note that this function performs additional
      /// validation that AC is unable to perform. (because AC knows only about a
      /// single transaction, but mempool potentially knows about multiple pending
      /// transactions)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mempool.AddTransactionWithValidationResponse> AddTransactionWithValidationAsync(global::Mempool.AddTransactionWithValidationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddTransactionWithValidation, null, options, request);
      }
      /// <summary>
      /// Fetch ordered block of transactions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mempool.GetBlockResponse GetBlock(global::Mempool.GetBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetch ordered block of transactions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mempool.GetBlockResponse GetBlock(global::Mempool.GetBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlock, null, options, request);
      }
      /// <summary>
      /// Fetch ordered block of transactions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mempool.GetBlockResponse> GetBlockAsync(global::Mempool.GetBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetch ordered block of transactions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mempool.GetBlockResponse> GetBlockAsync(global::Mempool.GetBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlock, null, options, request);
      }
      /// <summary>
      /// Remove committed transactions from Mempool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mempool.CommitTransactionsResponse CommitTransactions(global::Mempool.CommitTransactionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitTransactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove committed transactions from Mempool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mempool.CommitTransactionsResponse CommitTransactions(global::Mempool.CommitTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CommitTransactions, null, options, request);
      }
      /// <summary>
      /// Remove committed transactions from Mempool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mempool.CommitTransactionsResponse> CommitTransactionsAsync(global::Mempool.CommitTransactionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitTransactionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove committed transactions from Mempool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mempool.CommitTransactionsResponse> CommitTransactionsAsync(global::Mempool.CommitTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CommitTransactions, null, options, request);
      }
      /// <summary>
      /// Check the health of mempool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mempool.HealthCheckResponse HealthCheck(global::Mempool.HealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HealthCheck(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check the health of mempool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Mempool.HealthCheckResponse HealthCheck(global::Mempool.HealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HealthCheck, null, options, request);
      }
      /// <summary>
      /// Check the health of mempool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mempool.HealthCheckResponse> HealthCheckAsync(global::Mempool.HealthCheckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HealthCheckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check the health of mempool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Mempool.HealthCheckResponse> HealthCheckAsync(global::Mempool.HealthCheckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HealthCheck, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MempoolClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MempoolClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MempoolBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddTransactionWithValidation, serviceImpl.AddTransactionWithValidation)
          .AddMethod(__Method_GetBlock, serviceImpl.GetBlock)
          .AddMethod(__Method_CommitTransactions, serviceImpl.CommitTransactions)
          .AddMethod(__Method_HealthCheck, serviceImpl.HealthCheck).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MempoolBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddTransactionWithValidation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mempool.AddTransactionWithValidationRequest, global::Mempool.AddTransactionWithValidationResponse>(serviceImpl.AddTransactionWithValidation));
      serviceBinder.AddMethod(__Method_GetBlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mempool.GetBlockRequest, global::Mempool.GetBlockResponse>(serviceImpl.GetBlock));
      serviceBinder.AddMethod(__Method_CommitTransactions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mempool.CommitTransactionsRequest, global::Mempool.CommitTransactionsResponse>(serviceImpl.CommitTransactions));
      serviceBinder.AddMethod(__Method_HealthCheck, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Mempool.HealthCheckRequest, global::Mempool.HealthCheckResponse>(serviceImpl.HealthCheck));
    }

  }
}
#endregion
