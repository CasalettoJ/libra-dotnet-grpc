// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: execution.proto
// </auto-generated>
// Original file comments:
// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Execution {
  /// <summary>
  /// -----------------------------------------------------------------------------
  /// ---------------- Execution Service Definition
  /// -----------------------------------------------------------------------------
  /// </summary>
  public static partial class Execution
  {
    static readonly string __ServiceName = "execution.Execution";

    static readonly grpc::Marshaller<global::Execution.ExecuteBlockRequest> __Marshaller_execution_ExecuteBlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Execution.ExecuteBlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Execution.ExecuteBlockResponse> __Marshaller_execution_ExecuteBlockResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Execution.ExecuteBlockResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Execution.CommitBlockRequest> __Marshaller_execution_CommitBlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Execution.CommitBlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Execution.CommitBlockResponse> __Marshaller_execution_CommitBlockResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Execution.CommitBlockResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Execution.ExecuteChunkRequest> __Marshaller_execution_ExecuteChunkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Execution.ExecuteChunkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Execution.ExecuteChunkResponse> __Marshaller_execution_ExecuteChunkResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Execution.ExecuteChunkResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Execution.ExecuteBlockRequest, global::Execution.ExecuteBlockResponse> __Method_ExecuteBlock = new grpc::Method<global::Execution.ExecuteBlockRequest, global::Execution.ExecuteBlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteBlock",
        __Marshaller_execution_ExecuteBlockRequest,
        __Marshaller_execution_ExecuteBlockResponse);

    static readonly grpc::Method<global::Execution.CommitBlockRequest, global::Execution.CommitBlockResponse> __Method_CommitBlock = new grpc::Method<global::Execution.CommitBlockRequest, global::Execution.CommitBlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CommitBlock",
        __Marshaller_execution_CommitBlockRequest,
        __Marshaller_execution_CommitBlockResponse);

    static readonly grpc::Method<global::Execution.ExecuteChunkRequest, global::Execution.ExecuteChunkResponse> __Method_ExecuteChunk = new grpc::Method<global::Execution.ExecuteChunkRequest, global::Execution.ExecuteChunkResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteChunk",
        __Marshaller_execution_ExecuteChunkRequest,
        __Marshaller_execution_ExecuteChunkResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Execution.ExecutionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Execution</summary>
    [grpc::BindServiceMethod(typeof(Execution), "BindService")]
    public abstract partial class ExecutionBase
    {
      /// <summary>
      /// Execute a list of signed transactions given by consensus. Return the id
      /// of the block and the root hash of the ledger after applying transactions
      /// in this block.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Execution.ExecuteBlockResponse> ExecuteBlock(global::Execution.ExecuteBlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Commit a previously executed block that has been agreed by consensus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Execution.CommitBlockResponse> CommitBlock(global::Execution.CommitBlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Execute and commit a list of signed transactions received from peer
      /// during synchronization. Return the id of the block
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Execution.ExecuteChunkResponse> ExecuteChunk(global::Execution.ExecuteChunkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Execution</summary>
    public partial class ExecutionClient : grpc::ClientBase<ExecutionClient>
    {
      /// <summary>Creates a new client for Execution</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ExecutionClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Execution that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ExecutionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ExecutionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ExecutionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Execute a list of signed transactions given by consensus. Return the id
      /// of the block and the root hash of the ledger after applying transactions
      /// in this block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Execution.ExecuteBlockResponse ExecuteBlock(global::Execution.ExecuteBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a list of signed transactions given by consensus. Return the id
      /// of the block and the root hash of the ledger after applying transactions
      /// in this block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Execution.ExecuteBlockResponse ExecuteBlock(global::Execution.ExecuteBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteBlock, null, options, request);
      }
      /// <summary>
      /// Execute a list of signed transactions given by consensus. Return the id
      /// of the block and the root hash of the ledger after applying transactions
      /// in this block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Execution.ExecuteBlockResponse> ExecuteBlockAsync(global::Execution.ExecuteBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute a list of signed transactions given by consensus. Return the id
      /// of the block and the root hash of the ledger after applying transactions
      /// in this block.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Execution.ExecuteBlockResponse> ExecuteBlockAsync(global::Execution.ExecuteBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteBlock, null, options, request);
      }
      /// <summary>
      /// Commit a previously executed block that has been agreed by consensus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Execution.CommitBlockResponse CommitBlock(global::Execution.CommitBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commit a previously executed block that has been agreed by consensus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Execution.CommitBlockResponse CommitBlock(global::Execution.CommitBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CommitBlock, null, options, request);
      }
      /// <summary>
      /// Commit a previously executed block that has been agreed by consensus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Execution.CommitBlockResponse> CommitBlockAsync(global::Execution.CommitBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commit a previously executed block that has been agreed by consensus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Execution.CommitBlockResponse> CommitBlockAsync(global::Execution.CommitBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CommitBlock, null, options, request);
      }
      /// <summary>
      /// Execute and commit a list of signed transactions received from peer
      /// during synchronization. Return the id of the block
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Execution.ExecuteChunkResponse ExecuteChunk(global::Execution.ExecuteChunkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteChunk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute and commit a list of signed transactions received from peer
      /// during synchronization. Return the id of the block
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Execution.ExecuteChunkResponse ExecuteChunk(global::Execution.ExecuteChunkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteChunk, null, options, request);
      }
      /// <summary>
      /// Execute and commit a list of signed transactions received from peer
      /// during synchronization. Return the id of the block
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Execution.ExecuteChunkResponse> ExecuteChunkAsync(global::Execution.ExecuteChunkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteChunkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Execute and commit a list of signed transactions received from peer
      /// during synchronization. Return the id of the block
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Execution.ExecuteChunkResponse> ExecuteChunkAsync(global::Execution.ExecuteChunkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteChunk, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ExecutionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ExecutionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ExecutionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ExecuteBlock, serviceImpl.ExecuteBlock)
          .AddMethod(__Method_CommitBlock, serviceImpl.CommitBlock)
          .AddMethod(__Method_ExecuteChunk, serviceImpl.ExecuteChunk).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ExecutionBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ExecuteBlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Execution.ExecuteBlockRequest, global::Execution.ExecuteBlockResponse>(serviceImpl.ExecuteBlock));
      serviceBinder.AddMethod(__Method_CommitBlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Execution.CommitBlockRequest, global::Execution.CommitBlockResponse>(serviceImpl.CommitBlock));
      serviceBinder.AddMethod(__Method_ExecuteChunk, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Execution.ExecuteChunkRequest, global::Execution.ExecuteChunkResponse>(serviceImpl.ExecuteChunk));
    }

  }
}
#endregion
