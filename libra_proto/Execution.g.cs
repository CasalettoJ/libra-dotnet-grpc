// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: execution.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Execution {

  /// <summary>Holder for reflection information generated from execution.proto</summary>
  public static partial class ExecutionReflection {

    #region Descriptor
    /// <summary>File descriptor for execution.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExecutionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9leGVjdXRpb24ucHJvdG8SCWV4ZWN1dGlvbhoUZ2V0X3dpdGhfcHJvb2Yu",
            "cHJvdG8aEWxlZGdlcl9pbmZvLnByb3RvGhF0cmFuc2FjdGlvbi5wcm90bxoT",
            "dmFsaWRhdG9yX3NldC5wcm90bxoPdm1fZXJyb3JzLnByb3RvInAKE0V4ZWN1",
            "dGVCbG9ja1JlcXVlc3QSLgoMdHJhbnNhY3Rpb25zGAEgAygLMhgudHlwZXMu",
            "U2lnbmVkVHJhbnNhY3Rpb24SFwoPcGFyZW50X2Jsb2NrX2lkGAIgASgMEhAK",
            "CGJsb2NrX2lkGAMgASgMIoQBChRFeGVjdXRlQmxvY2tSZXNwb25zZRIRCgly",
            "b290X2hhc2gYASABKAwSHwoGc3RhdHVzGAIgAygLMg8udHlwZXMuVk1TdGF0",
            "dXMSDwoHdmVyc2lvbhgDIAEoBBInCgp2YWxpZGF0b3JzGAQgASgLMhMudHlw",
            "ZXMuVmFsaWRhdG9yU2V0IlQKEkNvbW1pdEJsb2NrUmVxdWVzdBI+ChVsZWRn",
            "ZXJfaW5mb193aXRoX3NpZ3MYASABKAsyHy50eXBlcy5MZWRnZXJJbmZvV2l0",
            "aFNpZ25hdHVyZXMiQwoTQ29tbWl0QmxvY2tSZXNwb25zZRIsCgZzdGF0dXMY",
            "ASABKA4yHC5leGVjdXRpb24uQ29tbWl0QmxvY2tTdGF0dXMikwEKE0V4ZWN1",
            "dGVDaHVua1JlcXVlc3QSPAoTdHhuX2xpc3Rfd2l0aF9wcm9vZhgBIAEoCzIf",
            "LnR5cGVzLlRyYW5zYWN0aW9uTGlzdFdpdGhQcm9vZhI+ChVsZWRnZXJfaW5m",
            "b193aXRoX3NpZ3MYAiABKAsyHy50eXBlcy5MZWRnZXJJbmZvV2l0aFNpZ25h",
            "dHVyZXMiFgoURXhlY3V0ZUNodW5rUmVzcG9uc2UqLgoRQ29tbWl0QmxvY2tT",
            "dGF0dXMSDQoJU1VDQ0VFREVEEAASCgoGRkFJTEVEEAEygQIKCUV4ZWN1dGlv",
            "bhJRCgxFeGVjdXRlQmxvY2sSHi5leGVjdXRpb24uRXhlY3V0ZUJsb2NrUmVx",
            "dWVzdBofLmV4ZWN1dGlvbi5FeGVjdXRlQmxvY2tSZXNwb25zZSIAEk4KC0Nv",
            "bW1pdEJsb2NrEh0uZXhlY3V0aW9uLkNvbW1pdEJsb2NrUmVxdWVzdBoeLmV4",
            "ZWN1dGlvbi5Db21taXRCbG9ja1Jlc3BvbnNlIgASUQoMRXhlY3V0ZUNodW5r",
            "Eh4uZXhlY3V0aW9uLkV4ZWN1dGVDaHVua1JlcXVlc3QaHy5leGVjdXRpb24u",
            "RXhlY3V0ZUNodW5rUmVzcG9uc2UiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Types.GetWithProofReflection.Descriptor, global::Types.LedgerInfoReflection.Descriptor, global::Types.TransactionReflection.Descriptor, global::Types.ValidatorSetReflection.Descriptor, global::Types.VmErrorsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Execution.CommitBlockStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Execution.ExecuteBlockRequest), global::Execution.ExecuteBlockRequest.Parser, new[]{ "Transactions", "ParentBlockId", "BlockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Execution.ExecuteBlockResponse), global::Execution.ExecuteBlockResponse.Parser, new[]{ "RootHash", "Status", "Version", "Validators" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Execution.CommitBlockRequest), global::Execution.CommitBlockRequest.Parser, new[]{ "LedgerInfoWithSigs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Execution.CommitBlockResponse), global::Execution.CommitBlockResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Execution.ExecuteChunkRequest), global::Execution.ExecuteChunkRequest.Parser, new[]{ "TxnListWithProof", "LedgerInfoWithSigs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Execution.ExecuteChunkResponse), global::Execution.ExecuteChunkResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CommitBlockStatus {
    /// <summary>
    /// The block is persisted.
    /// </summary>
    [pbr::OriginalName("SUCCEEDED")] Succeeded = 0,
    /// <summary>
    /// Something went wrong.
    /// </summary>
    [pbr::OriginalName("FAILED")] Failed = 1,
  }

  #endregion

  #region Messages
  public sealed partial class ExecuteBlockRequest : pb::IMessage<ExecuteBlockRequest> {
    private static readonly pb::MessageParser<ExecuteBlockRequest> _parser = new pb::MessageParser<ExecuteBlockRequest>(() => new ExecuteBlockRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteBlockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Execution.ExecutionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteBlockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteBlockRequest(ExecuteBlockRequest other) : this() {
      transactions_ = other.transactions_.Clone();
      parentBlockId_ = other.parentBlockId_;
      blockId_ = other.blockId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteBlockRequest Clone() {
      return new ExecuteBlockRequest(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Types.SignedTransaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Types.SignedTransaction.Parser);
    private readonly pbc::RepeatedField<global::Types.SignedTransaction> transactions_ = new pbc::RepeatedField<global::Types.SignedTransaction>();
    /// <summary>
    /// The list of transactions from consensus.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.SignedTransaction> Transactions {
      get { return transactions_; }
    }

    /// <summary>Field number for the "parent_block_id" field.</summary>
    public const int ParentBlockIdFieldNumber = 2;
    private pb::ByteString parentBlockId_ = pb::ByteString.Empty;
    /// <summary>
    /// Id of the parent block.
    /// We're going to use a special GENESIS_BLOCK_ID constant defined in
    /// crypto::hash module to refer to the block id of the Genesis block, which is
    /// executed in a special way.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ParentBlockId {
      get { return parentBlockId_; }
      set {
        parentBlockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_id" field.</summary>
    public const int BlockIdFieldNumber = 3;
    private pb::ByteString blockId_ = pb::ByteString.Empty;
    /// <summary>
    /// Id of the current block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockId {
      get { return blockId_; }
      set {
        blockId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteBlockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteBlockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      if (ParentBlockId != other.ParentBlockId) return false;
      if (BlockId != other.BlockId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      if (ParentBlockId.Length != 0) hash ^= ParentBlockId.GetHashCode();
      if (BlockId.Length != 0) hash ^= BlockId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (ParentBlockId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ParentBlockId);
      }
      if (BlockId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(BlockId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (ParentBlockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ParentBlockId);
      }
      if (BlockId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteBlockRequest other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
      if (other.ParentBlockId.Length != 0) {
        ParentBlockId = other.ParentBlockId;
      }
      if (other.BlockId.Length != 0) {
        BlockId = other.BlockId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
          case 18: {
            ParentBlockId = input.ReadBytes();
            break;
          }
          case 26: {
            BlockId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result of transaction execution.
  /// </summary>
  public sealed partial class ExecuteBlockResponse : pb::IMessage<ExecuteBlockResponse> {
    private static readonly pb::MessageParser<ExecuteBlockResponse> _parser = new pb::MessageParser<ExecuteBlockResponse>(() => new ExecuteBlockResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteBlockResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Execution.ExecutionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteBlockResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteBlockResponse(ExecuteBlockResponse other) : this() {
      rootHash_ = other.rootHash_;
      status_ = other.status_.Clone();
      version_ = other.version_;
      validators_ = other.validators_ != null ? other.validators_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteBlockResponse Clone() {
      return new ExecuteBlockResponse(this);
    }

    /// <summary>Field number for the "root_hash" field.</summary>
    public const int RootHashFieldNumber = 1;
    private pb::ByteString rootHash_ = pb::ByteString.Empty;
    /// <summary>
    /// Root hash of the ledger after applying all the transactions in this
    /// block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RootHash {
      get { return rootHash_; }
      set {
        rootHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Types.VMStatus> _repeated_status_codec
        = pb::FieldCodec.ForMessage(18, global::Types.VMStatus.Parser);
    private readonly pbc::RepeatedField<global::Types.VMStatus> status_ = new pbc::RepeatedField<global::Types.VMStatus>();
    /// <summary>
    /// The execution result of the transactions. Each transaction has a status
    /// field that indicates whether it should be included in the ledger once the
    /// block is committed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.VMStatus> Status {
      get { return status_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private ulong version_;
    /// <summary>
    /// The corresponding ledger version when this block is committed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "validators" field.</summary>
    public const int ValidatorsFieldNumber = 4;
    private global::Types.ValidatorSet validators_;
    /// <summary>
    /// If set, this field designates that if this block is committed, then the
    /// next epoch will start immediately with the included set of validators.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.ValidatorSet Validators {
      get { return validators_; }
      set {
        validators_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteBlockResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteBlockResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RootHash != other.RootHash) return false;
      if(!status_.Equals(other.status_)) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(Validators, other.Validators)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RootHash.Length != 0) hash ^= RootHash.GetHashCode();
      hash ^= status_.GetHashCode();
      if (Version != 0UL) hash ^= Version.GetHashCode();
      if (validators_ != null) hash ^= Validators.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RootHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RootHash);
      }
      status_.WriteTo(output, _repeated_status_codec);
      if (Version != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Version);
      }
      if (validators_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Validators);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RootHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RootHash);
      }
      size += status_.CalculateSize(_repeated_status_codec);
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      if (validators_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Validators);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteBlockResponse other) {
      if (other == null) {
        return;
      }
      if (other.RootHash.Length != 0) {
        RootHash = other.RootHash;
      }
      status_.Add(other.status_);
      if (other.Version != 0UL) {
        Version = other.Version;
      }
      if (other.validators_ != null) {
        if (validators_ == null) {
          Validators = new global::Types.ValidatorSet();
        }
        Validators.MergeFrom(other.Validators);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RootHash = input.ReadBytes();
            break;
          }
          case 18: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
          case 24: {
            Version = input.ReadUInt64();
            break;
          }
          case 34: {
            if (validators_ == null) {
              Validators = new global::Types.ValidatorSet();
            }
            input.ReadMessage(Validators);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommitBlockRequest : pb::IMessage<CommitBlockRequest> {
    private static readonly pb::MessageParser<CommitBlockRequest> _parser = new pb::MessageParser<CommitBlockRequest>(() => new CommitBlockRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitBlockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Execution.ExecutionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitBlockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitBlockRequest(CommitBlockRequest other) : this() {
      ledgerInfoWithSigs_ = other.ledgerInfoWithSigs_ != null ? other.ledgerInfoWithSigs_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitBlockRequest Clone() {
      return new CommitBlockRequest(this);
    }

    /// <summary>Field number for the "ledger_info_with_sigs" field.</summary>
    public const int LedgerInfoWithSigsFieldNumber = 1;
    private global::Types.LedgerInfoWithSignatures ledgerInfoWithSigs_;
    /// <summary>
    /// The ledger info with signatures from 2f+1 validators. It contains the id
    /// of the block consensus wants to commit. This will cause the given block
    /// and all the uncommitted ancestors to be committed to storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.LedgerInfoWithSignatures LedgerInfoWithSigs {
      get { return ledgerInfoWithSigs_; }
      set {
        ledgerInfoWithSigs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitBlockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitBlockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LedgerInfoWithSigs, other.LedgerInfoWithSigs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ledgerInfoWithSigs_ != null) hash ^= LedgerInfoWithSigs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ledgerInfoWithSigs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LedgerInfoWithSigs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ledgerInfoWithSigs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedgerInfoWithSigs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitBlockRequest other) {
      if (other == null) {
        return;
      }
      if (other.ledgerInfoWithSigs_ != null) {
        if (ledgerInfoWithSigs_ == null) {
          LedgerInfoWithSigs = new global::Types.LedgerInfoWithSignatures();
        }
        LedgerInfoWithSigs.MergeFrom(other.LedgerInfoWithSigs);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ledgerInfoWithSigs_ == null) {
              LedgerInfoWithSigs = new global::Types.LedgerInfoWithSignatures();
            }
            input.ReadMessage(LedgerInfoWithSigs);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommitBlockResponse : pb::IMessage<CommitBlockResponse> {
    private static readonly pb::MessageParser<CommitBlockResponse> _parser = new pb::MessageParser<CommitBlockResponse>(() => new CommitBlockResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitBlockResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Execution.ExecutionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitBlockResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitBlockResponse(CommitBlockResponse other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitBlockResponse Clone() {
      return new CommitBlockResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Execution.CommitBlockStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Execution.CommitBlockStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitBlockResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitBlockResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitBlockResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Execution.CommitBlockStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Ask Execution service to execute and commit a chunk of contiguous
  /// transactions. All the transactions in this chunk should belong to the same
  /// epoch E. If the caller has a list of transactions that span two epochs, it
  /// should split the transactions.
  /// </summary>
  public sealed partial class ExecuteChunkRequest : pb::IMessage<ExecuteChunkRequest> {
    private static readonly pb::MessageParser<ExecuteChunkRequest> _parser = new pb::MessageParser<ExecuteChunkRequest>(() => new ExecuteChunkRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteChunkRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Execution.ExecutionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteChunkRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteChunkRequest(ExecuteChunkRequest other) : this() {
      txnListWithProof_ = other.txnListWithProof_ != null ? other.txnListWithProof_.Clone() : null;
      ledgerInfoWithSigs_ = other.ledgerInfoWithSigs_ != null ? other.ledgerInfoWithSigs_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteChunkRequest Clone() {
      return new ExecuteChunkRequest(this);
    }

    /// <summary>Field number for the "txn_list_with_proof" field.</summary>
    public const int TxnListWithProofFieldNumber = 1;
    private global::Types.TransactionListWithProof txnListWithProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.TransactionListWithProof TxnListWithProof {
      get { return txnListWithProof_; }
      set {
        txnListWithProof_ = value;
      }
    }

    /// <summary>Field number for the "ledger_info_with_sigs" field.</summary>
    public const int LedgerInfoWithSigsFieldNumber = 2;
    private global::Types.LedgerInfoWithSignatures ledgerInfoWithSigs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.LedgerInfoWithSignatures LedgerInfoWithSigs {
      get { return ledgerInfoWithSigs_; }
      set {
        ledgerInfoWithSigs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteChunkRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteChunkRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TxnListWithProof, other.TxnListWithProof)) return false;
      if (!object.Equals(LedgerInfoWithSigs, other.LedgerInfoWithSigs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (txnListWithProof_ != null) hash ^= TxnListWithProof.GetHashCode();
      if (ledgerInfoWithSigs_ != null) hash ^= LedgerInfoWithSigs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (txnListWithProof_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TxnListWithProof);
      }
      if (ledgerInfoWithSigs_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LedgerInfoWithSigs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (txnListWithProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TxnListWithProof);
      }
      if (ledgerInfoWithSigs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedgerInfoWithSigs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteChunkRequest other) {
      if (other == null) {
        return;
      }
      if (other.txnListWithProof_ != null) {
        if (txnListWithProof_ == null) {
          TxnListWithProof = new global::Types.TransactionListWithProof();
        }
        TxnListWithProof.MergeFrom(other.TxnListWithProof);
      }
      if (other.ledgerInfoWithSigs_ != null) {
        if (ledgerInfoWithSigs_ == null) {
          LedgerInfoWithSigs = new global::Types.LedgerInfoWithSignatures();
        }
        LedgerInfoWithSigs.MergeFrom(other.LedgerInfoWithSigs);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (txnListWithProof_ == null) {
              TxnListWithProof = new global::Types.TransactionListWithProof();
            }
            input.ReadMessage(TxnListWithProof);
            break;
          }
          case 18: {
            if (ledgerInfoWithSigs_ == null) {
              LedgerInfoWithSigs = new global::Types.LedgerInfoWithSignatures();
            }
            input.ReadMessage(LedgerInfoWithSigs);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Either all transactions are successfully executed and persisted, or nothing
  /// happens.
  /// </summary>
  public sealed partial class ExecuteChunkResponse : pb::IMessage<ExecuteChunkResponse> {
    private static readonly pb::MessageParser<ExecuteChunkResponse> _parser = new pb::MessageParser<ExecuteChunkResponse>(() => new ExecuteChunkResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteChunkResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Execution.ExecutionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteChunkResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteChunkResponse(ExecuteChunkResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteChunkResponse Clone() {
      return new ExecuteChunkResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteChunkResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteChunkResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteChunkResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
