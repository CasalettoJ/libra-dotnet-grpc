// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vm_errors.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Types {

  /// <summary>Holder for reflection information generated from vm_errors.proto</summary>
  public static partial class VmErrorsReflection {

    #region Descriptor
    /// <summary>File descriptor for vm_errors.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VmErrorsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg92bV9lcnJvcnMucHJvdG8SBXR5cGVzIlIKElZNVmFsaWRhdGlvblN0YXR1",
            "cxIrCgRjb2RlGAEgASgOMh0udHlwZXMuVk1WYWxpZGF0aW9uU3RhdHVzQ29k",
            "ZRIPCgdtZXNzYWdlGAIgASgJIkwKGFZNVmVyaWZpY2F0aW9uU3RhdHVzTGlz",
            "dBIwCgtzdGF0dXNfbGlzdBgBIAMoCzIbLnR5cGVzLlZNVmVyaWZpY2F0aW9u",
            "U3RhdHVzItIBChRWTVZlcmlmaWNhdGlvblN0YXR1cxI7CgtzdGF0dXNfa2lu",
            "ZBgBIAEoDjImLnR5cGVzLlZNVmVyaWZpY2F0aW9uU3RhdHVzLlN0YXR1c0tp",
            "bmQSEgoKbW9kdWxlX2lkeBgCIAEoDRIyCgplcnJvcl9raW5kGAMgASgOMh4u",
            "dHlwZXMuVk1WZXJpZmljYXRpb25FcnJvcktpbmQSDwoHbWVzc2FnZRgEIAEo",
            "CSIkCgpTdGF0dXNLaW5kEgoKBlNDUklQVBAAEgoKBk1PRFVMRRABIjAKEEFz",
            "c2VydGlvbkZhaWx1cmUSHAoUYXNzZXJ0aW9uX2Vycm9yX2NvZGUYASABKAQi",
            "tQEKD0FyaXRobWV0aWNFcnJvchI+CgplcnJvcl9jb2RlGAEgASgOMioudHlw",
            "ZXMuQXJpdGhtZXRpY0Vycm9yLkFyaXRobWV0aWNFcnJvclR5cGUiYgoTQXJp",
            "dGhtZXRpY0Vycm9yVHlwZRIaChZVbmtub3duQXJpdGhtZXRpY0Vycm9yEAAS",
            "DQoJVW5kZXJmbG93EAESDAoIT3ZlcmZsb3cQAhISCg5EaXZpc2lvbkJ5WmVy",
            "bxADIo8CChVEeW5hbWljUmVmZXJlbmNlRXJyb3ISSgoKZXJyb3JfY29kZRgB",
            "IAEoDjI2LnR5cGVzLkR5bmFtaWNSZWZlcmVuY2VFcnJvci5EeW5hbWljUmVm",
            "ZXJlbmNlRXJyb3JUeXBlIqkBChlEeW5hbWljUmVmZXJlbmNlRXJyb3JUeXBl",
            "EiAKHFVua25vd25EeW5hbWljUmVmZXJlbmNlRXJyb3IQABIaChZNb3ZlT2ZC",
            "b3Jyb3dlZFJlc291cmNlEAESHAoYR2xvYmFsUmVmQWxyZWFkeVJlbGVhc2Vk",
            "EAISFQoRTWlzc2luZ1JlbGVhc2VSZWYQAxIZChVHbG9iYWxBbHJlYWR5Qm9y",
            "cm93ZWQQBCL4AQoPRXhlY3V0aW9uU3RhdHVzEi4KDnJ1bnRpbWVfc3RhdHVz",
            "GAEgASgOMhQudHlwZXMuUnVudGltZVN0YXR1c0gAEjQKEWFzc2VydGlvbl9m",
            "YWlsdXJlGAIgASgLMhcudHlwZXMuQXNzZXJ0aW9uRmFpbHVyZUgAEjIKEGFy",
            "aXRobWV0aWNfZXJyb3IYAyABKAsyFi50eXBlcy5Bcml0aG1ldGljRXJyb3JI",
            "ABI3Cg9yZWZlcmVuY2VfZXJyb3IYBCABKAsyHC50eXBlcy5EeW5hbWljUmVm",
            "ZXJlbmNlRXJyb3JIAEISChBleGVjdXRpb25fc3RhdHVzIp8CCghWTVN0YXR1",
            "cxIvCgp2YWxpZGF0aW9uGAEgASgLMhkudHlwZXMuVk1WYWxpZGF0aW9uU3Rh",
            "dHVzSAASNwoMdmVyaWZpY2F0aW9uGAIgASgLMh8udHlwZXMuVk1WZXJpZmlj",
            "YXRpb25TdGF0dXNMaXN0SAASPwoTaW52YXJpYW50X3Zpb2xhdGlvbhgDIAEo",
            "DjIgLnR5cGVzLlZNSW52YXJpYW50VmlvbGF0aW9uRXJyb3JIABItCg9kZXNl",
            "cmlhbGl6YXRpb24YBCABKA4yEi50eXBlcy5CaW5hcnlFcnJvckgAEisKCWV4",
            "ZWN1dGlvbhgFIAEoCzIWLnR5cGVzLkV4ZWN1dGlvblN0YXR1c0gAQgwKCmVy",
            "cm9yX3R5cGUq+AMKFlZNVmFsaWRhdGlvblN0YXR1c0NvZGUSGwoXVW5rbm93",
            "blZhbGlkYXRpb25TdGF0dXMQABIUChBJbnZhbGlkU2lnbmF0dXJlEAESEgoO",
            "SW52YWxpZEF1dGhLZXkQAhIYChRTZXF1ZW5jZU51bWJlclRvb09sZBADEhgK",
            "FFNlcXVlbmNlTnVtYmVyVG9vTmV3EAQSKAokSW5zdWZmaWNpZW50QmFsYW5j",
            "ZUZvclRyYW5zYWN0aW9uRmVlEAUSFgoSVHJhbnNhY3Rpb25FeHBpcmVkEAYS",
            "HgoaU2VuZGluZ0FjY291bnREb2VzTm90RXhpc3QQBxIUChBSZWplY3RlZFdy",
            "aXRlU2V0EAgSEwoPSW52YWxpZFdyaXRlU2V0EAkSHgoaRXhjZWVkZWRNYXhU",
            "cmFuc2FjdGlvblNpemUQChIRCg1Vbmtub3duU2NyaXB0EAsSEQoNVW5rbm93",
            "bk1vZHVsZRAMEiYKIk1heEdhc1VuaXRzRXhjZWVkc01heEdhc1VuaXRzQm91",
            "bmQQDRIqCiZNYXhHYXNVbml0c0JlbG93TWluVHJhbnNhY3Rpb25HYXNVbml0",
            "cxAOEh0KGUdhc1VuaXRQcmljZUJlbG93TWluQm91bmQQDxIdChlHYXNVbml0",
            "UHJpY2VBYm92ZU1heEJvdW5kEBAqxg8KF1ZNVmVyaWZpY2F0aW9uRXJyb3JL",
            "aW5kEhwKGFVua25vd25WZXJpZmljYXRpb25FcnJvchAAEhQKEEluZGV4T3V0",
            "T2ZCb3VuZHMQARIUChBSYW5nZU91dE9mQm91bmRzEAISGQoVSW52YWxpZFNp",
            "Z25hdHVyZVRva2VuEAMSHAoYSW52YWxpZEZpZWxkRGVmUmVmZXJlbmNlEAQS",
            "HQoZUmVjdXJzaXZlU3RydWN0RGVmaW5pdGlvbhAFEhgKFEludmFsaWRSZXNv",
            "dXJjZUZpZWxkEAYSFgoSSW52YWxpZEZhbGxUaHJvdWdoEAcSDwoLSm9pbkZh",
            "aWx1cmUQCBIgChxOZWdhdGl2ZVN0YWNrU2l6ZVdpdGhpbkJsb2NrEAkSEwoP",
            "VW5iYWxhbmNlZFN0YWNrEAoSIAocSW52YWxpZE1haW5GdW5jdGlvblNpZ25h",
            "dHVyZRALEhQKEER1cGxpY2F0ZUVsZW1lbnQQDBIXChNJbnZhbGlkTW9kdWxl",
            "SGFuZGxlEA0SFwoTVW5pbXBsZW1lbnRlZEhhbmRsZRAOEhYKEkluY29uc2lz",
            "dGVudEZpZWxkcxAPEhAKDFVudXNlZEZpZWxkcxAQEhAKDExvb2t1cEZhaWxl",
            "ZBAREhYKElZpc2liaWxpdHlNaXNtYXRjaBASEhkKFVR5cGVSZXNvbHV0aW9u",
            "RmFpbHVyZRATEhAKDFR5cGVNaXNtYXRjaBAUEhUKEU1pc3NpbmdEZXBlbmRl",
            "bmN5EBUSFQoRUG9wUmVmZXJlbmNlRXJyb3IQFhIUChBQb3BSZXNvdXJjZUVy",
            "cm9yEBcSHwobUmVsZWFzZVJlZlR5cGVNaXNtYXRjaEVycm9yEBgSFwoTQnJU",
            "eXBlTWlzbWF0Y2hFcnJvchAZEhsKF0Fzc2VydFR5cGVNaXNtYXRjaEVycm9y",
            "EBoSGgoWU3RMb2NUeXBlTWlzbWF0Y2hFcnJvchAbEh0KGVN0TG9jVW5zYWZl",
            "VG9EZXN0cm95RXJyb3IQHBIbChdSZXRVbnNhZmVUb0Rlc3Ryb3lFcnJvchAd",
            "EhgKFFJldFR5cGVNaXNtYXRjaEVycm9yEB4SHgoaRnJlZXplUmVmVHlwZU1p",
            "c21hdGNoRXJyb3IQHxIlCiFGcmVlemVSZWZFeGlzdHNNdXRhYmxlQm9ycm93",
            "RXJyb3IQIBIgChxCb3Jyb3dGaWVsZFR5cGVNaXNtYXRjaEVycm9yECESHAoY",
            "Qm9ycm93RmllbGRCYWRGaWVsZEVycm9yECISJwojQm9ycm93RmllbGRFeGlz",
            "dHNNdXRhYmxlQm9ycm93RXJyb3IQIxIbChdDb3B5TG9jVW5hdmFpbGFibGVF",
            "cnJvchAkEhgKFENvcHlMb2NSZXNvdXJjZUVycm9yECUSHAoYQ29weUxvY0V4",
            "aXN0c0JvcnJvd0Vycm9yECYSGwoXTW92ZUxvY1VuYXZhaWxhYmxlRXJyb3IQ",
            "JxIcChhNb3ZlTG9jRXhpc3RzQm9ycm93RXJyb3IQKBIbChdCb3Jyb3dMb2NS",
            "ZWZlcmVuY2VFcnJvchApEh0KGUJvcnJvd0xvY1VuYXZhaWxhYmxlRXJyb3IQ",
            "KhIeChpCb3Jyb3dMb2NFeGlzdHNCb3Jyb3dFcnJvchArEhkKFUNhbGxUeXBl",
            "TWlzbWF0Y2hFcnJvchAsEiUKIUNhbGxCb3Jyb3dlZE11dGFibGVSZWZlcmVu",
            "Y2VFcnJvchAtEhkKFVBhY2tUeXBlTWlzbWF0Y2hFcnJvchAuEhsKF1VucGFj",
            "a1R5cGVNaXNtYXRjaEVycm9yEC8SHAoYUmVhZFJlZlR5cGVNaXNtYXRjaEVy",
            "cm9yEDASGAoUUmVhZFJlZlJlc291cmNlRXJyb3IQMRIjCh9SZWFkUmVmRXhp",
            "c3RzTXV0YWJsZUJvcnJvd0Vycm9yEDISHQoZV3JpdGVSZWZUeXBlTWlzbWF0",
            "Y2hFcnJvchAzEhkKFVdyaXRlUmVmUmVzb3VyY2VFcnJvchA0Eh0KGVdyaXRl",
            "UmVmRXhpc3RzQm9ycm93RXJyb3IQNRIjCh9Xcml0ZVJlZk5vTXV0YWJsZVJl",
            "ZmVyZW5jZUVycm9yEDYSHgoaSW50ZWdlck9wVHlwZU1pc21hdGNoRXJyb3IQ",
            "NxIeChpCb29sZWFuT3BUeXBlTWlzbWF0Y2hFcnJvchA4Eh8KG0VxdWFsaXR5",
            "T3BUeXBlTWlzbWF0Y2hFcnJvchA5EiMKH0V4aXN0c1Jlc291cmNlVHlwZU1p",
            "c21hdGNoRXJyb3IQOhIhCh1Cb3Jyb3dHbG9iYWxUeXBlTWlzbWF0Y2hFcnJv",
            "chA7Eh8KG0JvcnJvd0dsb2JhbE5vUmVzb3VyY2VFcnJvchA8Eh0KGU1vdmVG",
            "cm9tVHlwZU1pc21hdGNoRXJyb3IQPRIbChdNb3ZlRnJvbU5vUmVzb3VyY2VF",
            "cnJvchA+EiEKHU1vdmVUb1NlbmRlclR5cGVNaXNtYXRjaEVycm9yED8SHwob",
            "TW92ZVRvU2VuZGVyTm9SZXNvdXJjZUVycm9yEEASIgoeQ3JlYXRlQWNjb3Vu",
            "dFR5cGVNaXNtYXRjaEVycm9yEEESIwofTW9kdWxlQWRkcmVzc0RvZXNOb3RN",
            "YXRjaFNlbmRlchBCEhMKD05vTW9kdWxlSGFuZGxlcxBDKuABChlWTUludmFy",
            "aWFudFZpb2xhdGlvbkVycm9yEiIKHlVua25vd25JbnZhcmlhbnRWaW9sYXRp",
            "b25FcnJvchAAEhQKEE91dE9mQm91bmRzSW5kZXgQARIUChBPdXRPZkJvdW5k",
            "c1JhbmdlEAISEwoPRW1wdHlWYWx1ZVN0YWNrEAMSEgoORW1wdHlDYWxsU3Rh",
            "Y2sQBBIOCgpQQ092ZXJmbG93EAUSDwoLTGlua2VyRXJyb3IQBhIXChNMb2Nh",
            "bFJlZmVyZW5jZUVycm9yEAcSEAoMU3RvcmFnZUVycm9yEAgq+QEKC0JpbmFy",
            "eUVycm9yEhYKElVua25vd25CaW5hcnlFcnJvchAAEg0KCU1hbGZvcm1lZBAB",
            "EgwKCEJhZE1hZ2ljEAISEgoOVW5rbm93blZlcnNpb24QAxIUChBVbmtub3du",
            "VGFibGVUeXBlEAQSGAoUVW5rbm93blNpZ25hdHVyZVR5cGUQBRIZChVVbmtu",
            "b3duU2VyaWFsaXplZFR5cGUQBhIRCg1Vbmtub3duT3Bjb2RlEAcSEgoOQmFk",
            "SGVhZGVyVGFibGUQCBIbChdVbmV4cGVjdGVkU2lnbmF0dXJlVHlwZRAJEhIK",
            "DkR1cGxpY2F0ZVRhYmxlEAoqhgMKDVJ1bnRpbWVTdGF0dXMSGAoUVW5rbm93",
            "blJ1bnRpbWVTdGF0dXMQABIMCghFeGVjdXRlZBABEgwKCE91dE9mR2FzEAIS",
            "GAoUUmVzb3VyY2VEb2VzTm90RXhpc3QQAxIZChVSZXNvdXJjZUFscmVhZHlF",
            "eGlzdHMQBBIYChRFdmljdGVkQWNjb3VudEFjY2VzcxAFEh8KG0FjY291bnRB",
            "ZGRyZXNzQWxyZWFkeUV4aXN0cxAGEg0KCVR5cGVFcnJvchAHEg8KC01pc3Np",
            "bmdEYXRhEAgSEwoPRGF0YUZvcm1hdEVycm9yEAkSDwoLSW52YWxpZERhdGEQ",
            "ChITCg9SZW1vdGVEYXRhRXJyb3IQCxIfChtDYW5ub3RXcml0ZUV4aXN0aW5n",
            "UmVzb3VyY2UQDBIbChdWYWx1ZVNlcmlhbGl6YXRpb25FcnJvchANEh0KGVZh",
            "bHVlRGVzZXJpYWxpemF0aW9uRXJyb3IQDhIXChNEdXBsaWNhdGVNb2R1bGVO",
            "YW1lEA9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Types.VMValidationStatusCode), typeof(global::Types.VMVerificationErrorKind), typeof(global::Types.VMInvariantViolationError), typeof(global::Types.BinaryError), typeof(global::Types.RuntimeStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.VMValidationStatus), global::Types.VMValidationStatus.Parser, new[]{ "Code", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.VMVerificationStatusList), global::Types.VMVerificationStatusList.Parser, new[]{ "StatusList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.VMVerificationStatus), global::Types.VMVerificationStatus.Parser, new[]{ "StatusKind", "ModuleIdx", "ErrorKind", "Message" }, null, new[]{ typeof(global::Types.VMVerificationStatus.Types.StatusKind) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.AssertionFailure), global::Types.AssertionFailure.Parser, new[]{ "AssertionErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.ArithmeticError), global::Types.ArithmeticError.Parser, new[]{ "ErrorCode" }, null, new[]{ typeof(global::Types.ArithmeticError.Types.ArithmeticErrorType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.DynamicReferenceError), global::Types.DynamicReferenceError.Parser, new[]{ "ErrorCode" }, null, new[]{ typeof(global::Types.DynamicReferenceError.Types.DynamicReferenceErrorType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.ExecutionStatus), global::Types.ExecutionStatus.Parser, new[]{ "RuntimeStatus", "AssertionFailure", "ArithmeticError", "ReferenceError" }, new[]{ "ExecutionStatus" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Types.VMStatus), global::Types.VMStatus.Parser, new[]{ "Validation", "Verification", "InvariantViolation", "Deserialization", "Execution" }, new[]{ "ErrorType" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// The status of a transaction as determined by the prologue.
  /// </summary>
  public enum VMValidationStatusCode {
    /// <summary>
    /// We don't want the default value to be valid
    /// </summary>
    [pbr::OriginalName("UnknownValidationStatus")] UnknownValidationStatus = 0,
    /// <summary>
    /// The transaction has a bad signature
    /// </summary>
    [pbr::OriginalName("InvalidSignature")] InvalidSignature = 1,
    /// <summary>
    /// Bad account authentication key
    /// </summary>
    [pbr::OriginalName("InvalidAuthKey")] InvalidAuthKey = 2,
    /// <summary>
    /// Sequence number is too old
    /// </summary>
    [pbr::OriginalName("SequenceNumberTooOld")] SequenceNumberTooOld = 3,
    /// <summary>
    /// Sequence number is too new
    /// </summary>
    [pbr::OriginalName("SequenceNumberTooNew")] SequenceNumberTooNew = 4,
    /// <summary>
    /// Insufficient balance to pay minimum transaction fee
    /// </summary>
    [pbr::OriginalName("InsufficientBalanceForTransactionFee")] InsufficientBalanceForTransactionFee = 5,
    /// <summary>
    /// The transaction has expired
    /// </summary>
    [pbr::OriginalName("TransactionExpired")] TransactionExpired = 6,
    /// <summary>
    /// The sending account does not exist
    /// </summary>
    [pbr::OriginalName("SendingAccountDoesNotExist")] SendingAccountDoesNotExist = 7,
    /// <summary>
    /// This write set transaction was rejected because it did not meet the
    /// requirements for one.
    /// </summary>
    [pbr::OriginalName("RejectedWriteSet")] RejectedWriteSet = 8,
    /// <summary>
    /// This write set transaction cannot be applied to the current state.
    /// </summary>
    [pbr::OriginalName("InvalidWriteSet")] InvalidWriteSet = 9,
    /// <summary>
    /// Length of program field in raw transaction exceeded max length
    /// </summary>
    [pbr::OriginalName("ExceededMaxTransactionSize")] ExceededMaxTransactionSize = 10,
    /// <summary>
    /// This script is not on our whitelist of script.
    /// </summary>
    [pbr::OriginalName("UnknownScript")] UnknownScript = 11,
    /// <summary>
    /// Transaction is trying to publish a new module.
    /// </summary>
    [pbr::OriginalName("UnknownModule")] UnknownModule = 12,
    /// <summary>
    /// Max gas units submitted with transaction exceeds max gas units bound
    /// in VM
    /// </summary>
    [pbr::OriginalName("MaxGasUnitsExceedsMaxGasUnitsBound")] MaxGasUnitsExceedsMaxGasUnitsBound = 13,
    /// <summary>
    /// Max gas units submitted with transaction not enough to cover the
    /// intrinsic cost of the transaction.
    /// </summary>
    [pbr::OriginalName("MaxGasUnitsBelowMinTransactionGasUnits")] MaxGasUnitsBelowMinTransactionGasUnits = 14,
    /// <summary>
    /// Gas unit price submitted with transaction is below minimum gas price
    /// set in the VM.
    /// </summary>
    [pbr::OriginalName("GasUnitPriceBelowMinBound")] GasUnitPriceBelowMinBound = 15,
    /// <summary>
    /// Gas unit price submitted with the transaction is above the maximum
    /// gas price set in the VM.
    /// </summary>
    [pbr::OriginalName("GasUnitPriceAboveMaxBound")] GasUnitPriceAboveMaxBound = 16,
  }

  /// <summary>
  /// When a code module/script is published it is verified. These are the
  /// possible errors that can arise from the verification process.
  /// </summary>
  public enum VMVerificationErrorKind {
    /// <summary>
    /// Likewise default to a unknown verification error
    /// </summary>
    [pbr::OriginalName("UnknownVerificationError")] UnknownVerificationError = 0,
    [pbr::OriginalName("IndexOutOfBounds")] IndexOutOfBounds = 1,
    [pbr::OriginalName("RangeOutOfBounds")] RangeOutOfBounds = 2,
    [pbr::OriginalName("InvalidSignatureToken")] InvalidSignatureToken = 3,
    [pbr::OriginalName("InvalidFieldDefReference")] InvalidFieldDefReference = 4,
    [pbr::OriginalName("RecursiveStructDefinition")] RecursiveStructDefinition = 5,
    [pbr::OriginalName("InvalidResourceField")] InvalidResourceField = 6,
    [pbr::OriginalName("InvalidFallThrough")] InvalidFallThrough = 7,
    [pbr::OriginalName("JoinFailure")] JoinFailure = 8,
    [pbr::OriginalName("NegativeStackSizeWithinBlock")] NegativeStackSizeWithinBlock = 9,
    [pbr::OriginalName("UnbalancedStack")] UnbalancedStack = 10,
    [pbr::OriginalName("InvalidMainFunctionSignature")] InvalidMainFunctionSignature = 11,
    [pbr::OriginalName("DuplicateElement")] DuplicateElement = 12,
    [pbr::OriginalName("InvalidModuleHandle")] InvalidModuleHandle = 13,
    [pbr::OriginalName("UnimplementedHandle")] UnimplementedHandle = 14,
    [pbr::OriginalName("InconsistentFields")] InconsistentFields = 15,
    [pbr::OriginalName("UnusedFields")] UnusedFields = 16,
    [pbr::OriginalName("LookupFailed")] LookupFailed = 17,
    [pbr::OriginalName("VisibilityMismatch")] VisibilityMismatch = 18,
    [pbr::OriginalName("TypeResolutionFailure")] TypeResolutionFailure = 19,
    [pbr::OriginalName("TypeMismatch")] TypeMismatch = 20,
    [pbr::OriginalName("MissingDependency")] MissingDependency = 21,
    [pbr::OriginalName("PopReferenceError")] PopReferenceError = 22,
    [pbr::OriginalName("PopResourceError")] PopResourceError = 23,
    [pbr::OriginalName("ReleaseRefTypeMismatchError")] ReleaseRefTypeMismatchError = 24,
    [pbr::OriginalName("BrTypeMismatchError")] BrTypeMismatchError = 25,
    [pbr::OriginalName("AssertTypeMismatchError")] AssertTypeMismatchError = 26,
    [pbr::OriginalName("StLocTypeMismatchError")] StLocTypeMismatchError = 27,
    [pbr::OriginalName("StLocUnsafeToDestroyError")] StLocUnsafeToDestroyError = 28,
    [pbr::OriginalName("RetUnsafeToDestroyError")] RetUnsafeToDestroyError = 29,
    [pbr::OriginalName("RetTypeMismatchError")] RetTypeMismatchError = 30,
    [pbr::OriginalName("FreezeRefTypeMismatchError")] FreezeRefTypeMismatchError = 31,
    [pbr::OriginalName("FreezeRefExistsMutableBorrowError")] FreezeRefExistsMutableBorrowError = 32,
    [pbr::OriginalName("BorrowFieldTypeMismatchError")] BorrowFieldTypeMismatchError = 33,
    [pbr::OriginalName("BorrowFieldBadFieldError")] BorrowFieldBadFieldError = 34,
    [pbr::OriginalName("BorrowFieldExistsMutableBorrowError")] BorrowFieldExistsMutableBorrowError = 35,
    [pbr::OriginalName("CopyLocUnavailableError")] CopyLocUnavailableError = 36,
    [pbr::OriginalName("CopyLocResourceError")] CopyLocResourceError = 37,
    [pbr::OriginalName("CopyLocExistsBorrowError")] CopyLocExistsBorrowError = 38,
    [pbr::OriginalName("MoveLocUnavailableError")] MoveLocUnavailableError = 39,
    [pbr::OriginalName("MoveLocExistsBorrowError")] MoveLocExistsBorrowError = 40,
    [pbr::OriginalName("BorrowLocReferenceError")] BorrowLocReferenceError = 41,
    [pbr::OriginalName("BorrowLocUnavailableError")] BorrowLocUnavailableError = 42,
    [pbr::OriginalName("BorrowLocExistsBorrowError")] BorrowLocExistsBorrowError = 43,
    [pbr::OriginalName("CallTypeMismatchError")] CallTypeMismatchError = 44,
    [pbr::OriginalName("CallBorrowedMutableReferenceError")] CallBorrowedMutableReferenceError = 45,
    [pbr::OriginalName("PackTypeMismatchError")] PackTypeMismatchError = 46,
    [pbr::OriginalName("UnpackTypeMismatchError")] UnpackTypeMismatchError = 47,
    [pbr::OriginalName("ReadRefTypeMismatchError")] ReadRefTypeMismatchError = 48,
    [pbr::OriginalName("ReadRefResourceError")] ReadRefResourceError = 49,
    [pbr::OriginalName("ReadRefExistsMutableBorrowError")] ReadRefExistsMutableBorrowError = 50,
    [pbr::OriginalName("WriteRefTypeMismatchError")] WriteRefTypeMismatchError = 51,
    [pbr::OriginalName("WriteRefResourceError")] WriteRefResourceError = 52,
    [pbr::OriginalName("WriteRefExistsBorrowError")] WriteRefExistsBorrowError = 53,
    [pbr::OriginalName("WriteRefNoMutableReferenceError")] WriteRefNoMutableReferenceError = 54,
    [pbr::OriginalName("IntegerOpTypeMismatchError")] IntegerOpTypeMismatchError = 55,
    [pbr::OriginalName("BooleanOpTypeMismatchError")] BooleanOpTypeMismatchError = 56,
    [pbr::OriginalName("EqualityOpTypeMismatchError")] EqualityOpTypeMismatchError = 57,
    [pbr::OriginalName("ExistsResourceTypeMismatchError")] ExistsResourceTypeMismatchError = 58,
    [pbr::OriginalName("BorrowGlobalTypeMismatchError")] BorrowGlobalTypeMismatchError = 59,
    [pbr::OriginalName("BorrowGlobalNoResourceError")] BorrowGlobalNoResourceError = 60,
    [pbr::OriginalName("MoveFromTypeMismatchError")] MoveFromTypeMismatchError = 61,
    [pbr::OriginalName("MoveFromNoResourceError")] MoveFromNoResourceError = 62,
    [pbr::OriginalName("MoveToSenderTypeMismatchError")] MoveToSenderTypeMismatchError = 63,
    [pbr::OriginalName("MoveToSenderNoResourceError")] MoveToSenderNoResourceError = 64,
    [pbr::OriginalName("CreateAccountTypeMismatchError")] CreateAccountTypeMismatchError = 65,
    /// <summary>
    /// The self address of a module the transaction is publishing is not the sender address
    /// </summary>
    [pbr::OriginalName("ModuleAddressDoesNotMatchSender")] ModuleAddressDoesNotMatchSender = 66,
    /// <summary>
    /// The module does not have any module handles. Each module or script must have at least one module handle.
    /// </summary>
    [pbr::OriginalName("NoModuleHandles")] NoModuleHandles = 67,
  }

  /// <summary>
  /// These are errors that the VM might raise if a violation of internal
  /// invariants takes place.
  /// </summary>
  public enum VMInvariantViolationError {
    [pbr::OriginalName("UnknownInvariantViolationError")] UnknownInvariantViolationError = 0,
    [pbr::OriginalName("OutOfBoundsIndex")] OutOfBoundsIndex = 1,
    [pbr::OriginalName("OutOfBoundsRange")] OutOfBoundsRange = 2,
    [pbr::OriginalName("EmptyValueStack")] EmptyValueStack = 3,
    [pbr::OriginalName("EmptyCallStack")] EmptyCallStack = 4,
    [pbr::OriginalName("PCOverflow")] Pcoverflow = 5,
    [pbr::OriginalName("LinkerError")] LinkerError = 6,
    [pbr::OriginalName("LocalReferenceError")] LocalReferenceError = 7,
    [pbr::OriginalName("StorageError")] StorageError = 8,
  }

  /// <summary>
  /// Errors that can arise from binary decoding (deserialization)
  /// </summary>
  public enum BinaryError {
    [pbr::OriginalName("UnknownBinaryError")] UnknownBinaryError = 0,
    [pbr::OriginalName("Malformed")] Malformed = 1,
    [pbr::OriginalName("BadMagic")] BadMagic = 2,
    [pbr::OriginalName("UnknownVersion")] UnknownVersion = 3,
    [pbr::OriginalName("UnknownTableType")] UnknownTableType = 4,
    [pbr::OriginalName("UnknownSignatureType")] UnknownSignatureType = 5,
    [pbr::OriginalName("UnknownSerializedType")] UnknownSerializedType = 6,
    [pbr::OriginalName("UnknownOpcode")] UnknownOpcode = 7,
    [pbr::OriginalName("BadHeaderTable")] BadHeaderTable = 8,
    [pbr::OriginalName("UnexpectedSignatureType")] UnexpectedSignatureType = 9,
    [pbr::OriginalName("DuplicateTable")] DuplicateTable = 10,
  }

  public enum RuntimeStatus {
    [pbr::OriginalName("UnknownRuntimeStatus")] UnknownRuntimeStatus = 0,
    [pbr::OriginalName("Executed")] Executed = 1,
    [pbr::OriginalName("OutOfGas")] OutOfGas = 2,
    /// <summary>
    /// We tried to access a resource that does not exist under the account.
    /// </summary>
    [pbr::OriginalName("ResourceDoesNotExist")] ResourceDoesNotExist = 3,
    /// <summary>
    /// We tried to create a resource under an account where that resource
    /// already exists.
    /// </summary>
    [pbr::OriginalName("ResourceAlreadyExists")] ResourceAlreadyExists = 4,
    /// <summary>
    /// We accessed an account that is evicted.
    /// </summary>
    [pbr::OriginalName("EvictedAccountAccess")] EvictedAccountAccess = 5,
    /// <summary>
    /// We tried to create an account at an address where an account already
    /// exists.
    /// </summary>
    [pbr::OriginalName("AccountAddressAlreadyExists")] AccountAddressAlreadyExists = 6,
    [pbr::OriginalName("TypeError")] TypeError = 7,
    [pbr::OriginalName("MissingData")] MissingData = 8,
    [pbr::OriginalName("DataFormatError")] DataFormatError = 9,
    [pbr::OriginalName("InvalidData")] InvalidData = 10,
    [pbr::OriginalName("RemoteDataError")] RemoteDataError = 11,
    [pbr::OriginalName("CannotWriteExistingResource")] CannotWriteExistingResource = 12,
    [pbr::OriginalName("ValueSerializationError")] ValueSerializationError = 13,
    [pbr::OriginalName("ValueDeserializationError")] ValueDeserializationError = 14,
    /// <summary>
    /// The sender is trying to publish a module named `M`, but the sender's account already contains
    /// a module with this name.
    /// </summary>
    [pbr::OriginalName("DuplicateModuleName")] DuplicateModuleName = 15,
  }

  #endregion

  #region Messages
  public sealed partial class VMValidationStatus : pb::IMessage<VMValidationStatus> {
    private static readonly pb::MessageParser<VMValidationStatus> _parser = new pb::MessageParser<VMValidationStatus>(() => new VMValidationStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VMValidationStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.VmErrorsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMValidationStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMValidationStatus(VMValidationStatus other) : this() {
      code_ = other.code_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMValidationStatus Clone() {
      return new VMValidationStatus(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Types.VMValidationStatusCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.VMValidationStatusCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VMValidationStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VMValidationStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VMValidationStatus other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Types.VMValidationStatusCode) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VMVerificationStatusList : pb::IMessage<VMVerificationStatusList> {
    private static readonly pb::MessageParser<VMVerificationStatusList> _parser = new pb::MessageParser<VMVerificationStatusList>(() => new VMVerificationStatusList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VMVerificationStatusList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.VmErrorsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMVerificationStatusList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMVerificationStatusList(VMVerificationStatusList other) : this() {
      statusList_ = other.statusList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMVerificationStatusList Clone() {
      return new VMVerificationStatusList(this);
    }

    /// <summary>Field number for the "status_list" field.</summary>
    public const int StatusListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Types.VMVerificationStatus> _repeated_statusList_codec
        = pb::FieldCodec.ForMessage(10, global::Types.VMVerificationStatus.Parser);
    private readonly pbc::RepeatedField<global::Types.VMVerificationStatus> statusList_ = new pbc::RepeatedField<global::Types.VMVerificationStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Types.VMVerificationStatus> StatusList {
      get { return statusList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VMVerificationStatusList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VMVerificationStatusList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!statusList_.Equals(other.statusList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= statusList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      statusList_.WriteTo(output, _repeated_statusList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += statusList_.CalculateSize(_repeated_statusList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VMVerificationStatusList other) {
      if (other == null) {
        return;
      }
      statusList_.Add(other.statusList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            statusList_.AddEntriesFrom(input, _repeated_statusList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VMVerificationStatus : pb::IMessage<VMVerificationStatus> {
    private static readonly pb::MessageParser<VMVerificationStatus> _parser = new pb::MessageParser<VMVerificationStatus>(() => new VMVerificationStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VMVerificationStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.VmErrorsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMVerificationStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMVerificationStatus(VMVerificationStatus other) : this() {
      statusKind_ = other.statusKind_;
      moduleIdx_ = other.moduleIdx_;
      errorKind_ = other.errorKind_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMVerificationStatus Clone() {
      return new VMVerificationStatus(this);
    }

    /// <summary>Field number for the "status_kind" field.</summary>
    public const int StatusKindFieldNumber = 1;
    private global::Types.VMVerificationStatus.Types.StatusKind statusKind_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.VMVerificationStatus.Types.StatusKind StatusKind {
      get { return statusKind_; }
      set {
        statusKind_ = value;
      }
    }

    /// <summary>Field number for the "module_idx" field.</summary>
    public const int ModuleIdxFieldNumber = 2;
    private uint moduleIdx_;
    /// <summary>
    /// For StatusKind::SCRIPT this is ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModuleIdx {
      get { return moduleIdx_; }
      set {
        moduleIdx_ = value;
      }
    }

    /// <summary>Field number for the "error_kind" field.</summary>
    public const int ErrorKindFieldNumber = 3;
    private global::Types.VMVerificationErrorKind errorKind_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.VMVerificationErrorKind ErrorKind {
      get { return errorKind_; }
      set {
        errorKind_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VMVerificationStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VMVerificationStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusKind != other.StatusKind) return false;
      if (ModuleIdx != other.ModuleIdx) return false;
      if (ErrorKind != other.ErrorKind) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusKind != 0) hash ^= StatusKind.GetHashCode();
      if (ModuleIdx != 0) hash ^= ModuleIdx.GetHashCode();
      if (ErrorKind != 0) hash ^= ErrorKind.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusKind != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatusKind);
      }
      if (ModuleIdx != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ModuleIdx);
      }
      if (ErrorKind != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ErrorKind);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusKind);
      }
      if (ModuleIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ModuleIdx);
      }
      if (ErrorKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorKind);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VMVerificationStatus other) {
      if (other == null) {
        return;
      }
      if (other.StatusKind != 0) {
        StatusKind = other.StatusKind;
      }
      if (other.ModuleIdx != 0) {
        ModuleIdx = other.ModuleIdx;
      }
      if (other.ErrorKind != 0) {
        ErrorKind = other.ErrorKind;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusKind = (global::Types.VMVerificationStatus.Types.StatusKind) input.ReadEnum();
            break;
          }
          case 16: {
            ModuleIdx = input.ReadUInt32();
            break;
          }
          case 24: {
            ErrorKind = (global::Types.VMVerificationErrorKind) input.ReadEnum();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VMVerificationStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StatusKind {
        [pbr::OriginalName("SCRIPT")] Script = 0,
        [pbr::OriginalName("MODULE")] Module = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// user-defined assertion error code number
  /// </summary>
  public sealed partial class AssertionFailure : pb::IMessage<AssertionFailure> {
    private static readonly pb::MessageParser<AssertionFailure> _parser = new pb::MessageParser<AssertionFailure>(() => new AssertionFailure());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssertionFailure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.VmErrorsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssertionFailure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssertionFailure(AssertionFailure other) : this() {
      assertionErrorCode_ = other.assertionErrorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssertionFailure Clone() {
      return new AssertionFailure(this);
    }

    /// <summary>Field number for the "assertion_error_code" field.</summary>
    public const int AssertionErrorCodeFieldNumber = 1;
    private ulong assertionErrorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AssertionErrorCode {
      get { return assertionErrorCode_; }
      set {
        assertionErrorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssertionFailure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssertionFailure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssertionErrorCode != other.AssertionErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssertionErrorCode != 0UL) hash ^= AssertionErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssertionErrorCode != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AssertionErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssertionErrorCode != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AssertionErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssertionFailure other) {
      if (other == null) {
        return;
      }
      if (other.AssertionErrorCode != 0UL) {
        AssertionErrorCode = other.AssertionErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AssertionErrorCode = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArithmeticError : pb::IMessage<ArithmeticError> {
    private static readonly pb::MessageParser<ArithmeticError> _parser = new pb::MessageParser<ArithmeticError>(() => new ArithmeticError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArithmeticError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.VmErrorsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArithmeticError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArithmeticError(ArithmeticError other) : this() {
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArithmeticError Clone() {
      return new ArithmeticError(this);
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private global::Types.ArithmeticError.Types.ArithmeticErrorType errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.ArithmeticError.Types.ArithmeticErrorType ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArithmeticError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArithmeticError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArithmeticError other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = (global::Types.ArithmeticError.Types.ArithmeticErrorType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ArithmeticError message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ArithmeticErrorType {
        [pbr::OriginalName("UnknownArithmeticError")] UnknownArithmeticError = 0,
        [pbr::OriginalName("Underflow")] Underflow = 1,
        [pbr::OriginalName("Overflow")] Overflow = 2,
        /// <summary>
        /// Fill with more later
        /// </summary>
        [pbr::OriginalName("DivisionByZero")] DivisionByZero = 3,
      }

    }
    #endregion

  }

  public sealed partial class DynamicReferenceError : pb::IMessage<DynamicReferenceError> {
    private static readonly pb::MessageParser<DynamicReferenceError> _parser = new pb::MessageParser<DynamicReferenceError>(() => new DynamicReferenceError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicReferenceError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.VmErrorsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicReferenceError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicReferenceError(DynamicReferenceError other) : this() {
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicReferenceError Clone() {
      return new DynamicReferenceError(this);
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private global::Types.DynamicReferenceError.Types.DynamicReferenceErrorType errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.DynamicReferenceError.Types.DynamicReferenceErrorType ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicReferenceError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicReferenceError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicReferenceError other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = (global::Types.DynamicReferenceError.Types.DynamicReferenceErrorType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DynamicReferenceError message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DynamicReferenceErrorType {
        [pbr::OriginalName("UnknownDynamicReferenceError")] UnknownDynamicReferenceError = 0,
        [pbr::OriginalName("MoveOfBorrowedResource")] MoveOfBorrowedResource = 1,
        [pbr::OriginalName("GlobalRefAlreadyReleased")] GlobalRefAlreadyReleased = 2,
        [pbr::OriginalName("MissingReleaseRef")] MissingReleaseRef = 3,
        /// <summary>
        /// Fill with with more later
        /// </summary>
        [pbr::OriginalName("GlobalAlreadyBorrowed")] GlobalAlreadyBorrowed = 4,
      }

    }
    #endregion

  }

  public sealed partial class ExecutionStatus : pb::IMessage<ExecutionStatus> {
    private static readonly pb::MessageParser<ExecutionStatus> _parser = new pb::MessageParser<ExecutionStatus>(() => new ExecutionStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecutionStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.VmErrorsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionStatus(ExecutionStatus other) : this() {
      switch (other.ExecutionStatusCase) {
        case ExecutionStatusOneofCase.RuntimeStatus:
          RuntimeStatus = other.RuntimeStatus;
          break;
        case ExecutionStatusOneofCase.AssertionFailure:
          AssertionFailure = other.AssertionFailure.Clone();
          break;
        case ExecutionStatusOneofCase.ArithmeticError:
          ArithmeticError = other.ArithmeticError.Clone();
          break;
        case ExecutionStatusOneofCase.ReferenceError:
          ReferenceError = other.ReferenceError.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionStatus Clone() {
      return new ExecutionStatus(this);
    }

    /// <summary>Field number for the "runtime_status" field.</summary>
    public const int RuntimeStatusFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.RuntimeStatus RuntimeStatus {
      get { return executionStatusCase_ == ExecutionStatusOneofCase.RuntimeStatus ? (global::Types.RuntimeStatus) executionStatus_ : 0; }
      set {
        executionStatus_ = value;
        executionStatusCase_ = ExecutionStatusOneofCase.RuntimeStatus;
      }
    }

    /// <summary>Field number for the "assertion_failure" field.</summary>
    public const int AssertionFailureFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.AssertionFailure AssertionFailure {
      get { return executionStatusCase_ == ExecutionStatusOneofCase.AssertionFailure ? (global::Types.AssertionFailure) executionStatus_ : null; }
      set {
        executionStatus_ = value;
        executionStatusCase_ = value == null ? ExecutionStatusOneofCase.None : ExecutionStatusOneofCase.AssertionFailure;
      }
    }

    /// <summary>Field number for the "arithmetic_error" field.</summary>
    public const int ArithmeticErrorFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.ArithmeticError ArithmeticError {
      get { return executionStatusCase_ == ExecutionStatusOneofCase.ArithmeticError ? (global::Types.ArithmeticError) executionStatus_ : null; }
      set {
        executionStatus_ = value;
        executionStatusCase_ = value == null ? ExecutionStatusOneofCase.None : ExecutionStatusOneofCase.ArithmeticError;
      }
    }

    /// <summary>Field number for the "reference_error" field.</summary>
    public const int ReferenceErrorFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.DynamicReferenceError ReferenceError {
      get { return executionStatusCase_ == ExecutionStatusOneofCase.ReferenceError ? (global::Types.DynamicReferenceError) executionStatus_ : null; }
      set {
        executionStatus_ = value;
        executionStatusCase_ = value == null ? ExecutionStatusOneofCase.None : ExecutionStatusOneofCase.ReferenceError;
      }
    }

    private object executionStatus_;
    /// <summary>Enum of possible cases for the "execution_status" oneof.</summary>
    public enum ExecutionStatusOneofCase {
      None = 0,
      RuntimeStatus = 1,
      AssertionFailure = 2,
      ArithmeticError = 3,
      ReferenceError = 4,
    }
    private ExecutionStatusOneofCase executionStatusCase_ = ExecutionStatusOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionStatusOneofCase ExecutionStatusCase {
      get { return executionStatusCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExecutionStatus() {
      executionStatusCase_ = ExecutionStatusOneofCase.None;
      executionStatus_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecutionStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecutionStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RuntimeStatus != other.RuntimeStatus) return false;
      if (!object.Equals(AssertionFailure, other.AssertionFailure)) return false;
      if (!object.Equals(ArithmeticError, other.ArithmeticError)) return false;
      if (!object.Equals(ReferenceError, other.ReferenceError)) return false;
      if (ExecutionStatusCase != other.ExecutionStatusCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (executionStatusCase_ == ExecutionStatusOneofCase.RuntimeStatus) hash ^= RuntimeStatus.GetHashCode();
      if (executionStatusCase_ == ExecutionStatusOneofCase.AssertionFailure) hash ^= AssertionFailure.GetHashCode();
      if (executionStatusCase_ == ExecutionStatusOneofCase.ArithmeticError) hash ^= ArithmeticError.GetHashCode();
      if (executionStatusCase_ == ExecutionStatusOneofCase.ReferenceError) hash ^= ReferenceError.GetHashCode();
      hash ^= (int) executionStatusCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (executionStatusCase_ == ExecutionStatusOneofCase.RuntimeStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RuntimeStatus);
      }
      if (executionStatusCase_ == ExecutionStatusOneofCase.AssertionFailure) {
        output.WriteRawTag(18);
        output.WriteMessage(AssertionFailure);
      }
      if (executionStatusCase_ == ExecutionStatusOneofCase.ArithmeticError) {
        output.WriteRawTag(26);
        output.WriteMessage(ArithmeticError);
      }
      if (executionStatusCase_ == ExecutionStatusOneofCase.ReferenceError) {
        output.WriteRawTag(34);
        output.WriteMessage(ReferenceError);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (executionStatusCase_ == ExecutionStatusOneofCase.RuntimeStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RuntimeStatus);
      }
      if (executionStatusCase_ == ExecutionStatusOneofCase.AssertionFailure) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AssertionFailure);
      }
      if (executionStatusCase_ == ExecutionStatusOneofCase.ArithmeticError) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArithmeticError);
      }
      if (executionStatusCase_ == ExecutionStatusOneofCase.ReferenceError) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceError);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecutionStatus other) {
      if (other == null) {
        return;
      }
      switch (other.ExecutionStatusCase) {
        case ExecutionStatusOneofCase.RuntimeStatus:
          RuntimeStatus = other.RuntimeStatus;
          break;
        case ExecutionStatusOneofCase.AssertionFailure:
          if (AssertionFailure == null) {
            AssertionFailure = new global::Types.AssertionFailure();
          }
          AssertionFailure.MergeFrom(other.AssertionFailure);
          break;
        case ExecutionStatusOneofCase.ArithmeticError:
          if (ArithmeticError == null) {
            ArithmeticError = new global::Types.ArithmeticError();
          }
          ArithmeticError.MergeFrom(other.ArithmeticError);
          break;
        case ExecutionStatusOneofCase.ReferenceError:
          if (ReferenceError == null) {
            ReferenceError = new global::Types.DynamicReferenceError();
          }
          ReferenceError.MergeFrom(other.ReferenceError);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            executionStatus_ = input.ReadEnum();
            executionStatusCase_ = ExecutionStatusOneofCase.RuntimeStatus;
            break;
          }
          case 18: {
            global::Types.AssertionFailure subBuilder = new global::Types.AssertionFailure();
            if (executionStatusCase_ == ExecutionStatusOneofCase.AssertionFailure) {
              subBuilder.MergeFrom(AssertionFailure);
            }
            input.ReadMessage(subBuilder);
            AssertionFailure = subBuilder;
            break;
          }
          case 26: {
            global::Types.ArithmeticError subBuilder = new global::Types.ArithmeticError();
            if (executionStatusCase_ == ExecutionStatusOneofCase.ArithmeticError) {
              subBuilder.MergeFrom(ArithmeticError);
            }
            input.ReadMessage(subBuilder);
            ArithmeticError = subBuilder;
            break;
          }
          case 34: {
            global::Types.DynamicReferenceError subBuilder = new global::Types.DynamicReferenceError();
            if (executionStatusCase_ == ExecutionStatusOneofCase.ReferenceError) {
              subBuilder.MergeFrom(ReferenceError);
            }
            input.ReadMessage(subBuilder);
            ReferenceError = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The status of the VM
  /// </summary>
  public sealed partial class VMStatus : pb::IMessage<VMStatus> {
    private static readonly pb::MessageParser<VMStatus> _parser = new pb::MessageParser<VMStatus>(() => new VMStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VMStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Types.VmErrorsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMStatus(VMStatus other) : this() {
      switch (other.ErrorTypeCase) {
        case ErrorTypeOneofCase.Validation:
          Validation = other.Validation.Clone();
          break;
        case ErrorTypeOneofCase.Verification:
          Verification = other.Verification.Clone();
          break;
        case ErrorTypeOneofCase.InvariantViolation:
          InvariantViolation = other.InvariantViolation;
          break;
        case ErrorTypeOneofCase.Deserialization:
          Deserialization = other.Deserialization;
          break;
        case ErrorTypeOneofCase.Execution:
          Execution = other.Execution.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VMStatus Clone() {
      return new VMStatus(this);
    }

    /// <summary>Field number for the "validation" field.</summary>
    public const int ValidationFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.VMValidationStatus Validation {
      get { return errorTypeCase_ == ErrorTypeOneofCase.Validation ? (global::Types.VMValidationStatus) errorType_ : null; }
      set {
        errorType_ = value;
        errorTypeCase_ = value == null ? ErrorTypeOneofCase.None : ErrorTypeOneofCase.Validation;
      }
    }

    /// <summary>Field number for the "verification" field.</summary>
    public const int VerificationFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.VMVerificationStatusList Verification {
      get { return errorTypeCase_ == ErrorTypeOneofCase.Verification ? (global::Types.VMVerificationStatusList) errorType_ : null; }
      set {
        errorType_ = value;
        errorTypeCase_ = value == null ? ErrorTypeOneofCase.None : ErrorTypeOneofCase.Verification;
      }
    }

    /// <summary>Field number for the "invariant_violation" field.</summary>
    public const int InvariantViolationFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.VMInvariantViolationError InvariantViolation {
      get { return errorTypeCase_ == ErrorTypeOneofCase.InvariantViolation ? (global::Types.VMInvariantViolationError) errorType_ : 0; }
      set {
        errorType_ = value;
        errorTypeCase_ = ErrorTypeOneofCase.InvariantViolation;
      }
    }

    /// <summary>Field number for the "deserialization" field.</summary>
    public const int DeserializationFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.BinaryError Deserialization {
      get { return errorTypeCase_ == ErrorTypeOneofCase.Deserialization ? (global::Types.BinaryError) errorType_ : 0; }
      set {
        errorType_ = value;
        errorTypeCase_ = ErrorTypeOneofCase.Deserialization;
      }
    }

    /// <summary>Field number for the "execution" field.</summary>
    public const int ExecutionFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Types.ExecutionStatus Execution {
      get { return errorTypeCase_ == ErrorTypeOneofCase.Execution ? (global::Types.ExecutionStatus) errorType_ : null; }
      set {
        errorType_ = value;
        errorTypeCase_ = value == null ? ErrorTypeOneofCase.None : ErrorTypeOneofCase.Execution;
      }
    }

    private object errorType_;
    /// <summary>Enum of possible cases for the "error_type" oneof.</summary>
    public enum ErrorTypeOneofCase {
      None = 0,
      Validation = 1,
      Verification = 2,
      InvariantViolation = 3,
      Deserialization = 4,
      Execution = 5,
    }
    private ErrorTypeOneofCase errorTypeCase_ = ErrorTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorTypeOneofCase ErrorTypeCase {
      get { return errorTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorType() {
      errorTypeCase_ = ErrorTypeOneofCase.None;
      errorType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VMStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VMStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Validation, other.Validation)) return false;
      if (!object.Equals(Verification, other.Verification)) return false;
      if (InvariantViolation != other.InvariantViolation) return false;
      if (Deserialization != other.Deserialization) return false;
      if (!object.Equals(Execution, other.Execution)) return false;
      if (ErrorTypeCase != other.ErrorTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (errorTypeCase_ == ErrorTypeOneofCase.Validation) hash ^= Validation.GetHashCode();
      if (errorTypeCase_ == ErrorTypeOneofCase.Verification) hash ^= Verification.GetHashCode();
      if (errorTypeCase_ == ErrorTypeOneofCase.InvariantViolation) hash ^= InvariantViolation.GetHashCode();
      if (errorTypeCase_ == ErrorTypeOneofCase.Deserialization) hash ^= Deserialization.GetHashCode();
      if (errorTypeCase_ == ErrorTypeOneofCase.Execution) hash ^= Execution.GetHashCode();
      hash ^= (int) errorTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (errorTypeCase_ == ErrorTypeOneofCase.Validation) {
        output.WriteRawTag(10);
        output.WriteMessage(Validation);
      }
      if (errorTypeCase_ == ErrorTypeOneofCase.Verification) {
        output.WriteRawTag(18);
        output.WriteMessage(Verification);
      }
      if (errorTypeCase_ == ErrorTypeOneofCase.InvariantViolation) {
        output.WriteRawTag(24);
        output.WriteEnum((int) InvariantViolation);
      }
      if (errorTypeCase_ == ErrorTypeOneofCase.Deserialization) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Deserialization);
      }
      if (errorTypeCase_ == ErrorTypeOneofCase.Execution) {
        output.WriteRawTag(42);
        output.WriteMessage(Execution);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (errorTypeCase_ == ErrorTypeOneofCase.Validation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Validation);
      }
      if (errorTypeCase_ == ErrorTypeOneofCase.Verification) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Verification);
      }
      if (errorTypeCase_ == ErrorTypeOneofCase.InvariantViolation) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InvariantViolation);
      }
      if (errorTypeCase_ == ErrorTypeOneofCase.Deserialization) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Deserialization);
      }
      if (errorTypeCase_ == ErrorTypeOneofCase.Execution) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Execution);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VMStatus other) {
      if (other == null) {
        return;
      }
      switch (other.ErrorTypeCase) {
        case ErrorTypeOneofCase.Validation:
          if (Validation == null) {
            Validation = new global::Types.VMValidationStatus();
          }
          Validation.MergeFrom(other.Validation);
          break;
        case ErrorTypeOneofCase.Verification:
          if (Verification == null) {
            Verification = new global::Types.VMVerificationStatusList();
          }
          Verification.MergeFrom(other.Verification);
          break;
        case ErrorTypeOneofCase.InvariantViolation:
          InvariantViolation = other.InvariantViolation;
          break;
        case ErrorTypeOneofCase.Deserialization:
          Deserialization = other.Deserialization;
          break;
        case ErrorTypeOneofCase.Execution:
          if (Execution == null) {
            Execution = new global::Types.ExecutionStatus();
          }
          Execution.MergeFrom(other.Execution);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Types.VMValidationStatus subBuilder = new global::Types.VMValidationStatus();
            if (errorTypeCase_ == ErrorTypeOneofCase.Validation) {
              subBuilder.MergeFrom(Validation);
            }
            input.ReadMessage(subBuilder);
            Validation = subBuilder;
            break;
          }
          case 18: {
            global::Types.VMVerificationStatusList subBuilder = new global::Types.VMVerificationStatusList();
            if (errorTypeCase_ == ErrorTypeOneofCase.Verification) {
              subBuilder.MergeFrom(Verification);
            }
            input.ReadMessage(subBuilder);
            Verification = subBuilder;
            break;
          }
          case 24: {
            errorType_ = input.ReadEnum();
            errorTypeCase_ = ErrorTypeOneofCase.InvariantViolation;
            break;
          }
          case 32: {
            errorType_ = input.ReadEnum();
            errorTypeCase_ = ErrorTypeOneofCase.Deserialization;
            break;
          }
          case 42: {
            global::Types.ExecutionStatus subBuilder = new global::Types.ExecutionStatus();
            if (errorTypeCase_ == ErrorTypeOneofCase.Execution) {
              subBuilder.MergeFrom(Execution);
            }
            input.ReadMessage(subBuilder);
            Execution = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
