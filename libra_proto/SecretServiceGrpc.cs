// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: secret_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SecretService {
  /// <summary>
  /// -----------------------------------------------------------------------------
  /// ---------------- Service definition
  /// -----------------------------------------------------------------------------
  /// </summary>
  public static partial class SecretService
  {
    static readonly string __ServiceName = "secret_service.SecretService";

    static readonly grpc::Marshaller<global::SecretService.GenerateKeyRequest> __Marshaller_secret_service_GenerateKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SecretService.GenerateKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SecretService.GenerateKeyResponse> __Marshaller_secret_service_GenerateKeyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SecretService.GenerateKeyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SecretService.PublicKeyRequest> __Marshaller_secret_service_PublicKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SecretService.PublicKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SecretService.PublicKeyResponse> __Marshaller_secret_service_PublicKeyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SecretService.PublicKeyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SecretService.SignRequest> __Marshaller_secret_service_SignRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SecretService.SignRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SecretService.SignResponse> __Marshaller_secret_service_SignResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SecretService.SignResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::SecretService.GenerateKeyRequest, global::SecretService.GenerateKeyResponse> __Method_GenerateKey = new grpc::Method<global::SecretService.GenerateKeyRequest, global::SecretService.GenerateKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateKey",
        __Marshaller_secret_service_GenerateKeyRequest,
        __Marshaller_secret_service_GenerateKeyResponse);

    static readonly grpc::Method<global::SecretService.PublicKeyRequest, global::SecretService.PublicKeyResponse> __Method_GetPublicKey = new grpc::Method<global::SecretService.PublicKeyRequest, global::SecretService.PublicKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPublicKey",
        __Marshaller_secret_service_PublicKeyRequest,
        __Marshaller_secret_service_PublicKeyResponse);

    static readonly grpc::Method<global::SecretService.SignRequest, global::SecretService.SignResponse> __Method_Sign = new grpc::Method<global::SecretService.SignRequest, global::SecretService.SignResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Sign",
        __Marshaller_secret_service_SignRequest,
        __Marshaller_secret_service_SignResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SecretService.SecretServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SecretService</summary>
    [grpc::BindServiceMethod(typeof(SecretService), "BindService")]
    public abstract partial class SecretServiceBase
    {
      /// <summary>
      /// API to request key generation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SecretService.GenerateKeyResponse> GenerateKey(global::SecretService.GenerateKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API to request a public key
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SecretService.PublicKeyResponse> GetPublicKey(global::SecretService.PublicKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API to request a signature
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SecretService.SignResponse> Sign(global::SecretService.SignRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SecretService</summary>
    public partial class SecretServiceClient : grpc::ClientBase<SecretServiceClient>
    {
      /// <summary>Creates a new client for SecretService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SecretServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SecretService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SecretServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SecretServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SecretServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// API to request key generation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SecretService.GenerateKeyResponse GenerateKey(global::SecretService.GenerateKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to request key generation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SecretService.GenerateKeyResponse GenerateKey(global::SecretService.GenerateKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateKey, null, options, request);
      }
      /// <summary>
      /// API to request key generation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SecretService.GenerateKeyResponse> GenerateKeyAsync(global::SecretService.GenerateKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to request key generation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SecretService.GenerateKeyResponse> GenerateKeyAsync(global::SecretService.GenerateKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateKey, null, options, request);
      }
      /// <summary>
      /// API to request a public key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SecretService.PublicKeyResponse GetPublicKey(global::SecretService.PublicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPublicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to request a public key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SecretService.PublicKeyResponse GetPublicKey(global::SecretService.PublicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPublicKey, null, options, request);
      }
      /// <summary>
      /// API to request a public key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SecretService.PublicKeyResponse> GetPublicKeyAsync(global::SecretService.PublicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPublicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to request a public key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SecretService.PublicKeyResponse> GetPublicKeyAsync(global::SecretService.PublicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPublicKey, null, options, request);
      }
      /// <summary>
      /// API to request a signature
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SecretService.SignResponse Sign(global::SecretService.SignRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Sign(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to request a signature
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SecretService.SignResponse Sign(global::SecretService.SignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Sign, null, options, request);
      }
      /// <summary>
      /// API to request a signature
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SecretService.SignResponse> SignAsync(global::SecretService.SignRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to request a signature
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SecretService.SignResponse> SignAsync(global::SecretService.SignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Sign, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SecretServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SecretServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SecretServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GenerateKey, serviceImpl.GenerateKey)
          .AddMethod(__Method_GetPublicKey, serviceImpl.GetPublicKey)
          .AddMethod(__Method_Sign, serviceImpl.Sign).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SecretServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GenerateKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SecretService.GenerateKeyRequest, global::SecretService.GenerateKeyResponse>(serviceImpl.GenerateKey));
      serviceBinder.AddMethod(__Method_GetPublicKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SecretService.PublicKeyRequest, global::SecretService.PublicKeyResponse>(serviceImpl.GetPublicKey));
      serviceBinder.AddMethod(__Method_Sign, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SecretService.SignRequest, global::SecretService.SignResponse>(serviceImpl.Sign));
    }

  }
}
#endregion
